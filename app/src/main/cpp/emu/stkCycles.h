
#pragma once

#define F_ALL       FS | FZ | F5 | FH | F3 | FPV | FN | FC
#define F_ALL1      FS | FZ | F5 | FH | F3 | FPV | FN
#define F_5H3NC     F5 | FH | F3 | FN | FC
#define F_DAA       FS | FZ | F5 | FH | F3 | FPV | FC
#define F_LDI       F5 | FH | F3 | FPV | FN
#define F_CPL       F5 | FH | F3 | FN

#define _RBC        (_R16 | _RC)
#define _RDE        (_R16 | _RE)
#define _RHL        (_R16 | _RL)
#define _RAF        (_R16 | _RF)
#define _RSP        (_R16 | _RS)

#define NONI        { 0, _N_, _N_, O_UNDEF, 1, C_ED_NONI }
// длина инструкции(3 бита) + длина последовательности циклов(5 бит)
#define _LL(li, lc) ((li & 3) | (lc << 2))

#define _LD_X_Y(x, y)    { 0,   x,     y,     O_ASSGN,_LL(1, 0), C_LD   }
#define _LD_X_HL(x)      { 110, x,     _PHL,  O_LOAD, _LL(1, 30), C_LD  }
#define _LD_HL_Y(y)      { 113, _PHL,  y,     O_SAVE, _LL(1, 31), C_LD  }

#define _ADD_A_X(x)      { 134, _N_, x, O_ADD8, 1, C_ADD            }
#define _ADC_A_X(x)      { 134, _N_, x, O_ADC8, 1, C_ADC            }
#define _SUB_A_X(x)      { 134, _N_, x, O_SUB8, 1, C_SUB            }
#define _SBC_A_X(x)      { 134, _N_, x, O_SBC8, 1, C_SBC            }
#define _XOR_A_X(x)      { 134, _N_, x, O_XOR,  1, C_XOR            }
#define _AND_A_X(x)      { 134, _N_, x, O_AND,  1, C_AND            }
#define _OR_A_X(x)       { 134, _N_, x, O_OR,   1, C_OR             }
#define _CP_A_X(x)       { 134, _N_, x, O_CP,   1, C_CP             }
#define _RLC_X(x, c)     { 136, x,   _PHL, O_RLC,_LL(1, 26), c      }
#define _RLC_PX(c)       { 127,_PHL, _PHL, O_RLC,_LL(1, 35), c      }
#define _RRC_X(x, c)     { 136, x,   _PHL, O_RRC,_LL(1, 26), c      }
#define _RRC_PX(c)       { 127,_PHL, _PHL, O_RRC,_LL(1, 35), c      }
#define _RL_X(x, c)      { 136, x,   _PHL, O_RL, _LL(1, 26), c      }
#define _RL_PX(c)        { 127,_PHL, _PHL, O_RL, _LL(1, 35), c      }
#define _RR_X(x, c)      { 136, x,   _PHL, O_RR, _LL(1, 26), c      }
#define _RR_PX(c)        { 127,_PHL, _PHL, O_RR, _LL(1, 35), c      }
#define _SLA_X(x, c)     { 136, x,   _PHL, O_SLA,_LL(1, 26), c      }
#define _SLA_PX(c)       { 127,_PHL, _PHL, O_SLA,_LL(1, 35), c      }
#define _SRA_X(x, c)     { 136, x,   _PHL, O_SRA,_LL(1, 26), c      }
#define _SRA_PX(c)       { 127,_PHL, _PHL, O_SRA,_LL(1, 35), c      }
#define _SLL_X(x, c)     { 136, x,   _PHL, O_SLL,_LL(1, 26), c      }
#define _SLL_PX(c)       { 127,_PHL, _PHL, O_SLL,_LL(1, 35), c      }
#define _SRL_X(x, c)     { 136, x,   _PHL, O_SRL,_LL(1, 26), c      }
#define _SRL_PX(c)       { 127,_PHL, _PHL, O_SRL,_LL(1, 35), c      }
#define _RES_X(x)        { 136, x,   _PHL, O_RES,_LL(1, 26), C_RES  }
#define _SET_X(x)        { 136, x,   _PHL, O_SET,_LL(1, 26), C_SET  }
#define _BIT_X(x)        { 136, x,   _PHL, O_BIT,_LL(1, 26), C_BIT  }
#define _RES_PX()        { 127,_PHL, _PHL, O_RES,_LL(1, 35), C_RES  }
#define _SET_PX()        { 127,_PHL, _PHL, O_SET,_LL(1, 35), C_SET  }
#define _BIT_PX()        { 131,_PHL, _PHL, O_BIT,_LL(1, 31), C_BIT  }

static uint8_t z_cycles[] = {
    0, OCR | 4,                                                     // 01 M1 CYCLE
    SDL, FIN,                                                       // 00 LD R1,R2
    SDL | 1, IOP, FIN,                                              // 02 LD A,R; LD A,I; LD I,A; LD R,A
    OPL | 3, SDL, FIN,                                              // 05 LD R, N
    OPL | 3, OPH | 3, PRD | 3, FIN,                                 // 08 LD A, [NN]
    OPL | 3, OPH | 3, PRD | 3, PRD | 3, FIN,                        // 12 LD RR, [NN]
    OPL | 3, OPH | 3, SDL, SDH, FIN,                                // 17 LD RR, NN
    OPL | 3, OPH | 3, PWR | 3, FIN,                                 // 22 LD [NN], A
    OPL | 3, OPH | 3, PWR | 3, PWR | 3, FIN,                        // 26 LD [NN], RR
    // со стеком
    SKP | 1, SWH | 3, SWL | 3, FIN,                                 // 31 PUSH RR
    SRL | 3, SRH | 3, FIN,                                          // 35 POP RR
    IOP, SRL | 3, SRH | 4, SWH | 3, SWL | 5, FIN,                   // 38 EX (SP), RR
    // арифметически-логические 
    IOP | 7, FIN,                                                   // 44 ADD HL/IX/IY, BC/DE/HL/SP/IX/IY; ADC/SBC HL, BC/DE/HL/SP
    OPL | 3, IOP, FIN,                                              // 46 ALU n
    IOP | 2, FIN,                                                   // 49 INC/DEC IX/IY/HL/BC/DE/SP; LD SP, IX/IY/HL
    // ввод/вывод
    OPL | 3, PRT | 4, IOP, FIN,                                     // 51 IN/OUT A, N
    PRT | 4, IOP, FIN,                                              // 55 IN R, BC; OUT BC, R
    // передача управления
    SKP | 1, DRD | 3, IOP, FIN,                                     // 58 DJNZ
    OPL | 3, OPH | 3, IOP, FIN,                                     // 62 JP NN; JP cc, NN
    SRL | 3, SRH | 3, FIN,                                          // 66 RETI; RET
    IOP | 1, SRL | 3, SRH | 3, FIN,                                 // 69 RET cc
    DRD | 3, IOP | 5, FIN,                                          // 73 JR e; JR cc, e
    OPL | 3, OPH | 4, IOP, SWH | 3, SWL | 3, IOP, FIN,              // 76 CALL NN; CALL cc, NN
    SKP | 1, SWH | 3, SWL | 3, IOP, FIN,                            // 83 RST p
    SRL | 3, SRH | 3, IOP, FIN,                                     // 88 RETN
    // блочные
    MRD | 3, MWR | 5, IOP, FIN,                                     // 92 LDI[R]; LDD[R]; CPI[R]; CPD[R]
    SKP | 1, PRT | 4, MWR | 3, IOP, FIN,                            // 96 INI; IND; OUTI; OUTD
    SKP | 1, MRD | 3, PRT | 4, IOP, FIN,                            // 101 OTI; OTD; OTIR; OTDR
    MRD | 3, IOP | 4, MWR | 3, FIN,                                 // 106 RLD; RRD
    // чтение/запись в память без префикса
    MRD | 3, RWR, FIN,                                              // 110 LD R, (HL/BC/DE)      30
    RRD, MWR | 3, FIN,                                              // 113 LD (HL/BC/DE), R      31
    MRD | 3, IOP, MWR | 4, FIN,                                     // 116 INC/DEC [HL]          32
    OPL | 3, RRD, MWR | 3, FIN,                                     // 120 LD (HL), N            33
    MRD | 3, IOP, FIN,                                              // 124 ALU [HL]              34
    MRD | 4, IOP, MWR | 3, FIN,                                     // 127 ROT/SET/RES [HL]      35
    MRD | 4, IOP, FIN,                                              // 131 BIT [HL]              31
    IOP, FIN,                                                       // 134 EXX; EX AF, AF'; EX DE, HL; 
                                                                    // 134 ALU R; INC/DEC R; DAA; CPL; NEG; CCF; SCF; NOP; HALT;  LD R1,R2
                                                                    // 134 DI/EI; IM n; JP IX/IY/HL; RLCA/RRCA/RLA/RRA
    XRD, IOP, RWR, FIN,                                             // 136 ROT/SET/RES/BIT r     26/26
    // чтение/запись в память с префиксом
    DRD | 3, MRD | 5, RWR | 3, FIN,                                 // 140 LD R, (IX/IY +- d)
    DRD | 3, RRD | 5, MWR | 3, FIN,                                 // 144 LD (IX/IY +- d), R
    DRD | 3, MRD | 5, IOP | 4, MWR | 3, FIN,                        // 148 INC/DEC [IX/IY +- d]
    DRD | 3, OPL | 5, RRD, MWR | 3, FIN,                            // 153 LD(IX/IY +- d), N
    DRD | 3, MRD | 5, IOP | 3, FIN,                                 // 158 ALU [IX/IY +- d]
    DRD | 3, OCR | 5, MRD | 4, IOP, XWR | 3, FIN,                   // 162 ROT/SET/RES [IX/IY +- d]
    // 168
};

static Z_MNEMONIC z_cmd[] = {
        { 134,_N_,  _N_,    O_SKIP,     1,  C_NOP           },  // NOP
        { 17, _RBC, _C16,   O_ASSGN,    3,  C_LD            },  // LD_BC_NN
        { 113,_PBC, _RA,    O_SAVE,     1,  C_LD            },  // LD_[BC]_A
        { 49, _N_,  _RBC,   O_INC,      1,  C_INC           },  // INC_BC
        { 134,_N_,  _RB,    O_INC8,     1,  C_INC           },  // INC_B
        { 134,_N_,  _RB,    O_DEC8,     1,  C_DEC           },  // DEC_B
        { 5,  _RB,  _C8,    O_ASSGN,    2,  C_LD            },  // LD_B_N
        { 134,_N_,  _N_,    O_RLCA,     1,  C_RLCA          },  // RLCA
        { 134,_N_,  _N_,    O_EXA,      1,  C_EX_AF         },  // EX_AF_AF'
        { 44, _RHL, _RBC,   O_ADD,      1,  C_ADD           },  // ADD_HL_BC
        { 110,_RA,  _PBC,   O_LOAD,     1,  C_LD            },  // LD_A_[BC]
        { 49, _N_,  _RBC,   O_DEC,      1,  C_DEC           },  // DEC_BC
        { 134,_N_,  _RC,    O_INC8,     1,  C_INC           },  // INC_C
        { 134,_N_,  _RC,    O_DEC8,     1,  C_DEC           },  // DEC_C
        { 5,  _RC,  _C8,    O_ASSGN,    2,  C_LD            },  // LD_C_N
        { 134,_N_,  _N_,    O_RRCA,     1,  C_RRCA          },  // RRCA
        { 58, _N_,  _C8,    O_DJNZ,     2,  C_DJNZ          },  // DJNZ
        { 17, _RDE, _C16,   O_ASSGN,    3,  C_LD            },  // LD_DE_NN
        { 113,_PDE, _RA,    O_SAVE,     1,  C_LD            },  // LD_[DE]_A
        { 49, _N_,  _RDE,   O_INC,      1,  C_INC           },  // INC_DE
        { 134,_N_,  _RD,    O_INC8,     1,  C_INC           },  // INC_D
        { 134,_N_,  _RD,    O_DEC8,     1,  C_DEC           },  // DEC_D
        { 5,  _RD,  _C8,    O_ASSGN,    2,  C_LD            },  // LD_D_N
        { 134,_N_,  _N_,    O_RLA,      1,  C_RLA           },  // RLA
        { 73, _N_,  _C8,    O_JR,       2,  C_JR            },  // JR_N
        { 44, _RHL, _RDE,   O_ADD,      1,  C_ADD           },  // ADD_HL_DE
        { 110,_RA,  _PDE,   O_LOAD,     1,  C_LD            },  // LD_A_[DE]
        { 49, _N_,  _RDE,   O_DEC,      1,  C_DEC           },  // DEC_DE
        { 134,_N_,  _RE,    O_INC8,     1,  C_INC           },  // INC_E
        { 134,_N_,  _RE,    O_DEC8,     1,  C_DEC           },  // DEC_E
        { 5,  _RE,  _C8,    O_ASSGN,    2,  C_LD            },  // LD_E_N
        { 134,_N_,  _N_,    O_RRA,      1,  C_RRA           },  // RRA
        { 73, _N_,  _C8,    O_JRX,      2,  C_JR, _NZ       },  // JR_NZ
        { 17, _RHL, _C16,   O_ASSGN,    3,  C_LD            },  // LD_HL_NN
        { 26, _P16, _RHL,   O_SAVE,     3,  C_LD            },  // LD_[NN]_HL
        { 49, _N_,  _RHL,   O_INC,      1,  C_INC           },  // INC_HL
        { 134,_N_,  _RH,    O_INC8,     1,  C_INC           },  // INC_H
        { 134,_N_,  _RH,    O_DEC8,     1,  C_DEC           },  // DEC_H
        { 5,  _RH,  _C8,    O_ASSGN,    2,  C_LD            },  // LD_H_N
        { 134,_RA,  _RA,    O_DAA,      1,  C_DAA           },  // DAA
        { 73, _N_,  _C8,    O_JRX,      2,  C_JR, _Z        },  // JR_Z
        { 44, _RHL, _RHL,   O_ADD,      1,  C_ADD           },  // ADD_HL_HL
        { 12, _RHL, _P16,   O_LOAD,     3,  C_LD            },  // LD_HL_[NN]
        { 49, _N_,  _RHL,   O_DEC,      1,  C_DEC           },  // DEC_HL
        { 134,_N_,  _RL,    O_INC8,     1,  C_INC           },  // INC_L
        { 134,_N_,  _RL,    O_DEC8,     1,  C_DEC           },  // DEC_L
        { 5,  _RL,  _C8,    O_ASSGN,    2,  C_LD            },  // LD_L_N
        { 134,_N_,  _N_,    O_CPL,      1,  C_CPL           },  // CPL
        { 73, _N_,  _C8,    O_JRX,      2,  C_JR, _NC       },  // JR_NC
        { 17, _RSP, _C16,   O_ASSGN,    3,  C_LD            },  // LD_SP_NN
        { 22, _P16, _RA,    O_SAVE,     3,  C_LD            },  // LD_[NN]_A
        { 49, _N_,  _RSP,   O_INC,      1,  C_INC           },  // INC_SP
        { 116,_PHL, _PHL,   O_INCP,_LL(1, 32), C_INC        },  // INC_[HL]
        { 116,_PHL, _PHL,   O_DECP,_LL(1, 32), C_DEC        },  // DEC_[HL]
        { 120,_PHL, _C8,    O_SAVE,_LL(2, 33), C_LD         },  // LD_[HL]_N
        { 134,_N_,  _N_,    O_SCF,      1,  C_SCF           },  // SCF
        { 73, _N_,  _C8,    O_JRX,      2,  C_JR, _C        },  // JR_C
        { 44, _RHL, _RSP,   O_ADD,      1,  C_ADD           },  // ADD_HL_SP
        { 8,  _RA,  _P16,   O_LOAD,     3,  C_LD            },  // LD_A_[NN]
        { 49, _N_,  _RSP,   O_DEC,      1,  C_DEC           },  // DEC_SP
        { 134,_N_,  _RA,    O_INC8,     1,  C_INC           },  // INC_A
        { 134,_N_,  _RA,    O_DEC8,     1,  C_DEC           },  // DEC_A
        { 5,  _RA,  _C8,    O_ASSGN,    2,  C_LD            },  // LD_A_N
        { 134,_N_,  _N_,    O_CCF,      1,  C_CCF           },  // CCF

        _LD_X_Y(_RB, _RB), _LD_X_Y(_RB, _RC), _LD_X_Y(_RB, _RD), _LD_X_Y(_RB, _RE), _LD_X_Y(_RB, _RH), _LD_X_Y(_RB, _RL), _LD_X_HL(_RB), _LD_X_Y(_RB, _RA),
        _LD_X_Y(_RC, _RB), _LD_X_Y(_RC, _RC), _LD_X_Y(_RC, _RD), _LD_X_Y(_RC, _RE), _LD_X_Y(_RC, _RH), _LD_X_Y(_RC, _RL), _LD_X_HL(_RC), _LD_X_Y(_RC, _RA),
        _LD_X_Y(_RD, _RB), _LD_X_Y(_RD, _RC), _LD_X_Y(_RD, _RD), _LD_X_Y(_RD, _RE), _LD_X_Y(_RD, _RH), _LD_X_Y(_RD, _RL), _LD_X_HL(_RD), _LD_X_Y(_RD, _RA),
        _LD_X_Y(_RE, _RB), _LD_X_Y(_RE, _RC), _LD_X_Y(_RE, _RD), _LD_X_Y(_RE, _RE), _LD_X_Y(_RE, _RH), _LD_X_Y(_RE, _RL), _LD_X_HL(_RE), _LD_X_Y(_RE, _RA),
        _LD_X_Y(_RH, _RB), _LD_X_Y(_RH, _RC), _LD_X_Y(_RH, _RD), _LD_X_Y(_RH, _RE), _LD_X_Y(_RH, _RH), _LD_X_Y(_RH, _RL), _LD_X_HL(_RH), _LD_X_Y(_RH, _RA),
        _LD_X_Y(_RL, _RB), _LD_X_Y(_RL, _RC), _LD_X_Y(_RL, _RD), _LD_X_Y(_RL, _RE), _LD_X_Y(_RL, _RH), _LD_X_Y(_RL, _RL), _LD_X_HL(_RL), _LD_X_Y(_RL, _RA),
        _LD_HL_Y(_RB), _LD_HL_Y(_RC), _LD_HL_Y(_RD), _LD_HL_Y(_RE), _LD_HL_Y(_RH), _LD_HL_Y(_RL), { 134,  _N_,  _N_, O_HLT, 1, C_HALT }, _LD_HL_Y(_RA),
        _LD_X_Y(_RA, _RB), _LD_X_Y(_RA, _RC), _LD_X_Y(_RA, _RD), _LD_X_Y(_RA, _RE), _LD_X_Y(_RA, _RH), _LD_X_Y(_RA, _RL), _LD_X_HL(_RA), _LD_X_Y(_RA, _RA),

        _ADD_A_X(_RB), _ADD_A_X(_RC), _ADD_A_X(_RD), _ADD_A_X(_RE), _ADD_A_X(_RH), _ADD_A_X(_RL), { 124, _N_, _PHL, O_ADD8, _LL(1, 34), C_ADD }, _ADD_A_X(_RA),
        _ADC_A_X(_RB), _ADC_A_X(_RC), _ADC_A_X(_RD), _ADC_A_X(_RE), _ADC_A_X(_RH), _ADC_A_X(_RL), { 124, _N_, _PHL, O_ADC8, _LL(1, 34), C_ADC }, _ADC_A_X(_RA),
        _SUB_A_X(_RB), _SUB_A_X(_RC), _SUB_A_X(_RD), _SUB_A_X(_RE), _SUB_A_X(_RH), _SUB_A_X(_RL), { 124, _N_, _PHL, O_SUB8, _LL(1, 34), C_SUB }, _SUB_A_X(_RA),
        _SBC_A_X(_RB), _SBC_A_X(_RC), _SBC_A_X(_RD), _SBC_A_X(_RE), _SBC_A_X(_RH), _SBC_A_X(_RL), { 124, _N_, _PHL, O_SBC8, _LL(1, 34), C_SBC }, _SBC_A_X(_RA),
        _AND_A_X(_RB), _AND_A_X(_RC), _AND_A_X(_RD), _AND_A_X(_RE), _AND_A_X(_RH), _AND_A_X(_RL), { 124, _N_, _PHL, O_AND,  _LL(1, 34), C_AND }, _AND_A_X(_RA),
        _XOR_A_X(_RB), _XOR_A_X(_RC), _XOR_A_X(_RD), _XOR_A_X(_RE), _XOR_A_X(_RH), _XOR_A_X(_RL), { 124, _N_, _PHL, O_XOR,  _LL(1, 34), C_XOR }, _XOR_A_X(_RA),
        _OR_A_X(_RB), _OR_A_X(_RC), _OR_A_X(_RD), _OR_A_X(_RE), _OR_A_X(_RH), _OR_A_X(_RL), { 124, _N_, _PHL, O_OR, _LL(1, 34), C_OR }, _OR_A_X(_RA),
        _CP_A_X(_RB), _CP_A_X(_RC), _CP_A_X(_RD), _CP_A_X(_RE), _CP_A_X(_RH), _CP_A_X(_RL), { 124, _N_, _PHL, O_CP, _LL(1, 34), C_CP }, _CP_A_X(_RA),

        { 69, _RPC, _N_,    O_RETX,  1,  C_RET,  _NZ     },  // RET_NZ
        { 35, _RBC, _N_,    O_SKIP,  1,  C_POP           },  // POP_BC
        { 62, _N_,  _C16,   O_JMPX,  3,  C_JP,   _NZ     },  // JP_NZ
        { 62, _N_,  _C16,   O_JMP,   3,  C_JP            },  // JP_NN
        { 76, _C16, _RPC,   O_CALLX, 3,  C_CALL, _NZ     },  // CALL_NZ
        { 31, _N_,  _RBC,   O_SKIP,  1,  C_PUSH          },  // PUSH_BC
        { 46, _N_,  _C8,    O_ADD8,  2,  C_ADD           },  // ADD_A_N
        { 83, _N_,  _RPC,   O_RST,   1,  C_RST           },  // RST0
        { 69, _RPC, _N_,    O_RETX,  1,  C_RET,  _Z      },  // RET_Z
        { 66, _RPC, _N_,    O_RET,   1,  C_RET           },  // RET
        { 62, _N_,  _C16,   O_JMPX,  3,  C_JP,   _Z      },  // JP_Z
        { 0,   1,   0,      O_PREF,  1,  C_NULL          },  // PREF_CB
        { 76, _C16, _RPC,   O_CALLX, 3,  C_CALL, _Z      },  // CALL_Z
        { 76, _C16, _RPC,   O_CALL,  3,  C_CALL          },  // CALL_NN
        { 46, _N_,  _C8,    O_ADC8,  2,  C_ADC           },  // ADC_A_N
        { 83, _N_,  _RPC,   O_RST,   1,  C_RST           },  // RST8
        { 69, _RPC, _N_,    O_RETX,  1,  C_RET,  _NC     },  // RET_NC
        { 35, _RDE, _N_,    O_SKIP,  1,  C_POP           },  // POP_DE
        { 62, _N_,  _C16,   O_JMPX,  3,  C_JP,   _NC     },  // JP_NC
        { 51, _RA,  _C8,    O_OUT,   2,  C_OUT           },  // OUT_N_A
        { 76, _C16, _RPC,   O_CALLX, 3,  C_CALL, _NC     },  // CALL_NC
        { 31, _N_,  _RDE,   O_SKIP,  1,  C_PUSH          },  // PUSH_DE
        { 46, _N_,  _C8,    O_SUB8,  2,  C_SUB           },  // SUB_N
        { 83, _N_,  _RPC,   O_RST,   1,  C_RST           },  // RST16
        { 69, _RPC, _N_,    O_RETX,  1,  C_RET,  _C      },  // RET_C
        { 134,_N_,  _N_,    O_EXX,   1,  C_EXX           },  // EXX
        { 62, _N_,  _C16,   O_JMPX,  3,  C_JP,   _C      },  // JP_C
        { 51, _RA,  _C8,    O_IN,    2,  C_IN            },  // IN_A_N
        { 76, _C16, _RPC,   O_CALLX, 3,  C_CALL, _C      },  // CALL_C
        { 0,   0,   12,     O_PREF,  1,  C_NULL          },  // PREF_DD
        { 46, _N_,  _C8,    O_SBC8,  2,  C_SBC           },  // SBC_A_N
        { 83, _N_,  _RPC,   O_RST,   1,  C_RST           },  // RST24
        { 69, _RPC, _N_,    O_RETX,  1,  C_RET,  _PO     },  // RET_PO
        { 35, _RHL, _N_,    O_SKIP,  1,  C_POP           },  // POP_HL
        { 62, _N_,  _C16,   O_JMPX,  3,  C_JP,   _PO     },  // JP_PO
        { 38, _RHL, _C16,   O_EXSP,  1,  C_EX_SP         },  // EX_(SP)_HL
        { 76, _C16, _RPC,   O_CALLX, 3,  C_CALL, _PO     },  // CALL_PO
        { 31, _N_,  _RHL,   O_SKIP,  1,  C_PUSH          },  // PUSH_HL
        { 46, _N_,  _C8,    O_AND,   2,  C_AND           },  // AND_N
        { 83, _N_,  _RPC,   O_RST,   1,  C_RST           },  // RST32
        { 69, _RPC, _N_,    O_RETX,  1,  C_RET,  _PE     },  // RET_PE
        { 134,_N_,  _RHL,   O_JMP,   1,  C_JP            },  // JP_HL
        { 62, _N_,  _C16,   O_JMPX,  3,  C_JP,   _PE     },  // JP_PE
        { 134,_N_,  _N_,    O_EXHD,  1,  C_EX_DE         },  // EX_DE_HL
        { 76, _C16, _RPC,   O_CALLX, 3,  C_CALL, _PE     },  // CALL_PE
        { 0,   2,    0,     O_PREF,  1,  C_NULL, 2       },  // PREF_ED
        { 46, _N_,  _C8,    O_XOR,   2,  C_XOR           },  // XOR_N
        { 83, _N_,  _RPC,   O_RST,   1,  C_RST           },  // RST40
        { 69, _RPC, _N_,    O_RETX,  1,  C_RET,  _P      },  // RET_P
        { 35, _RAF, _N_,    O_SKIP,  1,  C_POP           },  // POP_AF
        { 62, _N_,  _C16,   O_JMPX,  3,  C_JP,   _P      },  // JP_P
        { 134,_N_,  _N_,    O_XI,    1,  C_DI            },  // DI
        { 76, _C16, _RPC,   O_CALLX, 3,  C_CALL, _P      },  // CALL_P
        { 31, _N_,  _RAF,   O_SKIP,  1,  C_PUSH          },  // PUSH_AF
        { 46, _N_,  _C8,    O_OR,    2,  C_OR            },  // OR_N
        { 83, _N_,  _RPC,   O_RST,   1,  C_RST           },  // RST48
        { 69, _RPC, _N_,    O_RETX,  1,  C_RET,  _M      },  // RET_M
        { 49, _N_,  _RHL,   O_LDSP,  1,  C_LDSP          },  // LD_SP_HL
        { 62, _N_,  _C16,   O_JMPX,  3,  C_JP,   _M      },  // JP_M
        { 134,_N_,  _N_,    O_XI,    1,  C_EI            },  // EI
        { 76, _C16, _RPC,   O_CALLX, 3,  C_CALL, _M      },  // CALL_M
        { 0,   0,   24,     O_PREF,  1,  C_NULL          },  // PREF_FD
        { 46, _N_,  _C8,    O_CP,    2,  C_CP            },  // CP_N
        { 83, _N_,  _RPC,   O_RST,   1,  C_RST           },  // RST56
        // 203
        _RLC_X(_RB, C_RLC), _RLC_X(_RC, C_RLC), _RLC_X(_RD, C_RLC), _RLC_X(_RE, C_RLC), _RLC_X(_RH, C_RLC), _RLC_X(_RL, C_RLC), _RLC_PX(C_RLC), _RLC_X(_RA, C_RLC),
        _RRC_X(_RB, C_RRC), _RRC_X(_RC, C_RRC), _RRC_X(_RD, C_RRC), _RRC_X(_RE, C_RRC), _RRC_X(_RH, C_RRC), _RRC_X(_RL, C_RRC), _RRC_PX(C_RRC), _RRC_X(_RA, C_RRC),
        _RL_X(_RB, C_RL), _RL_X(_RC, C_RL), _RL_X(_RD, C_RL), _RL_X(_RE, C_RL), _RL_X(_RH, C_RL), _RL_X(_RL, C_RL), _RL_PX(C_RL), _RL_X(_RA, C_RL),
        _RR_X(_RB, C_RR), _RR_X(_RC, C_RR), _RR_X(_RD, C_RR), _RR_X(_RE, C_RR), _RR_X(_RH, C_RR), _RR_X(_RL, C_RR), _RR_PX(C_RR), _RR_X(_RA, C_RR),
        _SLA_X(_RB, C_SLA), _SLA_X(_RC, C_SLA), _SLA_X(_RD, C_SLA), _SLA_X(_RE, C_SLA), _SLA_X(_RH, C_SLA), _SLA_X(_RL, C_SLA), _SLA_PX(C_SLA), _SLA_X(_RA, C_SLA),
        _SRA_X(_RB, C_SRA), _SRA_X(_RC, C_SRA), _SRA_X(_RD, C_SRA), _SRA_X(_RE, C_SRA), _SRA_X(_RH, C_SRA), _SRA_X(_RL, C_SRA), _SRA_PX(C_SRA), _SRA_X(_RA, C_SRA),
        _SLL_X(_RB, C_SLI), _SLL_X(_RC, C_SLI), _SLL_X(_RD, C_SLI), _SLL_X(_RE, C_SLI), _SLL_X(_RH, C_SLI), _SLL_X(_RL, C_SLI), _SLL_PX(C_SLI), _SLL_X(_RA, C_SLI),
        _SRL_X(_RB, C_SRL), _SRL_X(_RC, C_SRL), _SRL_X(_RD, C_SRL), _SRL_X(_RE, C_SRL), _SRL_X(_RH, C_SRL), _SRL_X(_RL, C_SRL), _SRL_PX(C_SRL), _SRL_X(_RA, C_SRL),

        _BIT_X(_RB), _BIT_X(_RC), _BIT_X(_RD), _BIT_X(_RE), _BIT_X(_RH), _BIT_X(_RL), _BIT_PX(), _BIT_X(_RA),
        _BIT_X(_RB), _BIT_X(_RC), _BIT_X(_RD), _BIT_X(_RE), _BIT_X(_RH), _BIT_X(_RL), _BIT_PX(), _BIT_X(_RA),
        _BIT_X(_RB), _BIT_X(_RC), _BIT_X(_RD), _BIT_X(_RE), _BIT_X(_RH), _BIT_X(_RL), _BIT_PX(), _BIT_X(_RA),
        _BIT_X(_RB), _BIT_X(_RC), _BIT_X(_RD), _BIT_X(_RE), _BIT_X(_RH), _BIT_X(_RL), _BIT_PX(), _BIT_X(_RA),
        _BIT_X(_RB), _BIT_X(_RC), _BIT_X(_RD), _BIT_X(_RE), _BIT_X(_RH), _BIT_X(_RL), _BIT_PX(), _BIT_X(_RA),
        _BIT_X(_RB), _BIT_X(_RC), _BIT_X(_RD), _BIT_X(_RE), _BIT_X(_RH), _BIT_X(_RL), _BIT_PX(), _BIT_X(_RA),
        _BIT_X(_RB), _BIT_X(_RC), _BIT_X(_RD), _BIT_X(_RE), _BIT_X(_RH), _BIT_X(_RL), _BIT_PX(), _BIT_X(_RA),
        _BIT_X(_RB), _BIT_X(_RC), _BIT_X(_RD), _BIT_X(_RE), _BIT_X(_RH), _BIT_X(_RL), _BIT_PX(), _BIT_X(_RA),

        _RES_X(_RB), _RES_X(_RC), _RES_X(_RD), _RES_X(_RE), _RES_X(_RH), _RES_X(_RL), _RES_PX(), _RES_X(_RA),
        _RES_X(_RB), _RES_X(_RC), _RES_X(_RD), _RES_X(_RE), _RES_X(_RH), _RES_X(_RL), _RES_PX(), _RES_X(_RA),
        _RES_X(_RB), _RES_X(_RC), _RES_X(_RD), _RES_X(_RE), _RES_X(_RH), _RES_X(_RL), _RES_PX(), _RES_X(_RA),
        _RES_X(_RB), _RES_X(_RC), _RES_X(_RD), _RES_X(_RE), _RES_X(_RH), _RES_X(_RL), _RES_PX(), _RES_X(_RA),
        _RES_X(_RB), _RES_X(_RC), _RES_X(_RD), _RES_X(_RE), _RES_X(_RH), _RES_X(_RL), _RES_PX(), _RES_X(_RA),
        _RES_X(_RB), _RES_X(_RC), _RES_X(_RD), _RES_X(_RE), _RES_X(_RH), _RES_X(_RL), _RES_PX(), _RES_X(_RA),
        _RES_X(_RB), _RES_X(_RC), _RES_X(_RD), _RES_X(_RE), _RES_X(_RH), _RES_X(_RL), _RES_PX(), _RES_X(_RA),
        _RES_X(_RB), _RES_X(_RC), _RES_X(_RD), _RES_X(_RE), _RES_X(_RH), _RES_X(_RL), _RES_PX(), _RES_X(_RA),

        _SET_X(_RB), _SET_X(_RC), _SET_X(_RD), _SET_X(_RE), _SET_X(_RH), _SET_X(_RL), _SET_PX(), _SET_X(_RA),
        _SET_X(_RB), _SET_X(_RC), _SET_X(_RD), _SET_X(_RE), _SET_X(_RH), _SET_X(_RL), _SET_PX(), _SET_X(_RA),
        _SET_X(_RB), _SET_X(_RC), _SET_X(_RD), _SET_X(_RE), _SET_X(_RH), _SET_X(_RL), _SET_PX(), _SET_X(_RA),
        _SET_X(_RB), _SET_X(_RC), _SET_X(_RD), _SET_X(_RE), _SET_X(_RH), _SET_X(_RL), _SET_PX(), _SET_X(_RA),
        _SET_X(_RB), _SET_X(_RC), _SET_X(_RD), _SET_X(_RE), _SET_X(_RH), _SET_X(_RL), _SET_PX(), _SET_X(_RA),
        _SET_X(_RB), _SET_X(_RC), _SET_X(_RD), _SET_X(_RE), _SET_X(_RH), _SET_X(_RL), _SET_PX(), _SET_X(_RA),
        _SET_X(_RB), _SET_X(_RC), _SET_X(_RD), _SET_X(_RE), _SET_X(_RH), _SET_X(_RL), _SET_PX(), _SET_X(_RA),
        _SET_X(_RB), _SET_X(_RC), _SET_X(_RD), _SET_X(_RE), _SET_X(_RH), _SET_X(_RL), _SET_PX(), _SET_X(_RA),

        // 237
        NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI,
        NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI,
        NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI,
        NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI,
        NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI,
        { 55, _RB,  _RBC,   O_IN,   1,  C_IN,  F_ALL1   },  // IN_B_BC = 64
        { 55, _RB,  _RBC,   O_OUT,  1,  C_OUT           },  // OUT_BC_B
        { 44, _RHL, _RBC,   O_SBC,  1,  C_SBC           },  // SBC_HL_BC
        { 26, _P16, _RBC,   O_SAVE, 3,  C_LD            },  // LD_[NN]_BC
        { 134,_N_,  _N_,    O_NEG,  1,  C_NEG           },  // NEG
        { 88, _RPC, _N_,    O_RETN, 1,  C_RETN          },  // RETN
        { 134,_N_,  _N_,    O_IM,   1,  C_IM, 0         },  // IM0
        { 2,  _RI,  _RA,    O_ASSGN,1,  C_LD            },  // LD_I_A
        { 55, _RC,  _RBC,   O_IN,   1,  C_IN,  F_ALL1   },  // IN_C_BC
        { 55, _RC,  _RBC,   O_OUT,  1,  C_OUT           },  // OUT_BC_C
        { 44, _RHL, _RBC,   O_ADC,  1,  C_ADC           },  // ADC_HL_BC
        { 12, _RBC, _P16,   O_LOAD, 3,  C_LD            },  // LD_BC_[NN]
        { 134,_N_,  _N_,    O_NEG,  1,  C_NEG           },  // NEG
        { 66, _RPC, _N_,    O_RET,  1,  C_RETI          },  // RETI
        { 134,_N_,  _N_,    O_IM,   1,  C_IM, 0         },  // IM0**
        { 2,  _RR,  _RA,    O_RA,   1,  C_LD            },  // LD_R_A
        { 55, _RD,  _RBC,   O_IN,   1,  C_IN,  F_ALL1   },  // IN_D_BC
        { 55, _RD,  _RBC,   O_OUT,  1,  C_OUT           },  // OUT_BC_D
        { 44, _RHL, _RDE,   O_SBC,  1,  C_SBC           },  // SBC_HL_DE
        { 26, _P16, _RDE,   O_SAVE, 3,  C_LD            },  // LD_[NN]_DE
        { 134,_N_,  _N_,    O_NEG,  1,  C_NEG           },  // NEG
        { 88, _RPC, _N_,    O_RETN, 1,  C_RETN          },  // RETN**
        { 134,_N_,  _N_,    O_IM,   1,  C_IM, 1         },  // IM1
        { 2,  _RA,  _RI,    O_AI,   1,  C_LD            },  // LD_A_I
        { 55, _RE,  _RBC,   O_IN,   1,  C_IN,  F_ALL1   },  // IN_E_BC
        { 55, _RE,  _RBC,   O_OUT,  1,  C_OUT           },  // OUT_BC_E
        { 44, _RHL, _RDE,   O_ADC,  1,  C_ADC           },  // ADC_HL_DE
        { 12, _RDE, _P16,   O_LOAD, 3,  C_LD            },  // LD_DE_[NN]
        { 134,_N_,  _N_,    O_NEG,  1,  C_NEG           },  // NEG
        { 88, _RPC, _N_,    O_RETN, 1,  C_RETN          },  // RETN**
        { 134,_N_,  _N_,    O_IM,   1,  C_IM, 2         },  // IM2
        { 2,  _RA,  _RR,    O_AR,   1,  C_LD            },  // LD_A_R
        { 55, _RH,  _RBC,   O_IN,   1,  C_IN, F_ALL1    },  // IN_H_BC
        { 55, _RH,  _RBC,   O_OUT,  1,  C_OUT           },  // OUT_BC_H
        { 44, _RHL, _RHL,   O_SBC,  1,  C_SBC           },  // SBC_HL_HL
        { 26, _P16, _RHL,   O_SAVE, 3,  C_LD            },  // LD_[NN]_HL
        { 134,_N_,  _N_,    O_NEG,  1,  C_NEG           },  // NEG
        { 88, _RPC, _N_,    O_RETN, 1,  C_RETN          },  // RETN** 101
        { 134,_N_,  _N_,    O_IM,   1,  C_IM, 0         },  // IM0**
        { 106,_PHL, _PHL,   O_RRD,  1,  C_RRD           },  // RRD=103
        { 55, _RL,  _RBC,   O_IN,   1,  C_IN, F_ALL1    },  // IN_L_BC
        { 55, _RL,  _RBC,   O_OUT,  1,  C_OUT           },  // OUT_BC_L
        { 44, _RHL, _RHL,   O_ADC,  1,  C_ADC           },  // ADC_HL_HL
        { 12, _RHL, _P16,   O_LOAD, 3,  C_LD            },  // LD_HL_[NN]
        { 134,_N_,  _N_,    O_NEG,  1,  C_NEG           },  // NEG
        { 88, _RPC, _N_,    O_RETN, 1,  C_RETN          },  // RETN**
        { 134,_N_,  _N_,    O_IM,   1,  C_IM, 0         },  // IM0**
        { 106,_PHL, _PHL,   O_RLD,  1,  C_RLD           },  // RLD=111
        { 55, _N_,  _RBC,   O_IN,   1,  C_IN,  F_ALL1   },  // IN_F_BC**
        { 55, _ZERO,_RBC,   O_OUT,  1,  C_OUT           },  // OUT_BC_0**
        { 44, _RHL, _RSP,   O_SBC,  1,  C_SBC           },  // SBC_HL_SP
        { 26, _P16, _RSP,   O_SAVE, 3,  C_LD            },  // LD_[NN]_SP
        { 134,_N_,  _N_,    O_NEG,  1,  C_NEG           },  // NEG
        { 88, _RPC, _N_,    O_RETN, 1,  C_RETN          },  // RETN**
        { 134,_N_,  _N_,    O_IM,   1,  C_IM, 1         },  // IM1**
        { 134,_N_,  _N_,    O_SKIP, 1,  C_NOP           },  // NOP**=119
        { 55, _RA,  _RBC,   O_IN,   1,  C_IN,  F_ALL1   },  // IN_A_BC
        { 55, _RA,  _RBC,   O_OUT,  1,  C_OUT           },  // OUT_BC_A
        { 44, _RHL, _RSP,   O_ADC,  1,  C_ADC           },  // ADC_HL_SP
        { 12, _RSP, _P16,   O_LOAD, 3,  C_LD            },  // LD_SP_[NN]
        { 134,_N_,  _N_,    O_NEG,  1,  C_NEG           },  // NEG
        { 88, _RPC, _N_,    O_RETN, 1,  C_RETN          },  // RETN**
        { 134,_N_,  _N_,    O_IM,   1,  C_IM, 2         },  // IM2**
        { 134,_N_,  _N_,    O_SKIP, 1,  C_NOP           },  // NOP** = 127
        NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI,
        NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI,
        NONI, NONI, NONI, NONI,
        { 92, _PDE, _PHL, O_LDI, 1, C_LDI   },  // LDI = 160
        { 92, _PHL, _PHL, O_CPI, 1, C_CPI   },  // CPI
        { 96, _PHL, _PHL, O_INI, 1, C_INI   },  // INI
        { 101,_PHL, _PHL, O_OTI, 1, C_OTI   },  // OTI
        NONI, NONI, NONI, NONI,
        { 92, _PDE, _PHL, O_LDI, 1, C_LDD   },  // LDD = 168
        { 92, _PHL, _PHL, O_CPI, 1, C_CPD   },  // CPD
        { 96, _PHL, _PHL, O_INI, 1, C_IND   },  // IND
        { 101,_PHL, _PHL, O_OTI, 1, C_OTD   },  // OTD
        NONI, NONI, NONI, NONI,
        { 92, _PDE, _PHL, O_LDI, 1, C_LDIR  }, // LDIR = 176
        { 92, _PHL ,_PHL, O_CPI, 1, C_CPIR  }, // CPIR
        { 96, _PHL, _PHL, O_INI, 1, C_INIR  }, // INIR
        { 101,_PHL, _PHL, O_OTI, 1, C_OTIR  }, // OTIR
        NONI, NONI, NONI, NONI,
        { 92, _PDE, _PHL, O_LDI, 1, C_LDDR  }, // LDDR = 184
        { 92, _PHL, _PHL, O_CPI, 1, C_CPDR  }, // CPDR
        { 96, _PHL, _PHL, O_INI, 1, C_INDR  }, // INDR
        { 101,_PHL, _PHL, O_OTI, 1, C_OTDR  }, // OTDR = 187
        NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI,
        NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI,
        NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI,
        NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI,
        NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI, NONI,
        { 0,  _N_, _N_, O_UNDEF, 1, C_IX_NONI },
        { 0,  _N_, _N_, O_UNDEF, 1, C_IY_NONI },
        { 0,  _N_, _N_, O_UNDEF, 0, C_NULL    },// 770
        { 163,_N_, _N_, 0,       0, C_NULL    }
};
/*

NOP; LD r,r'; alo A,r; INC/DEC r; EXX; EX AF,AF'
EX DE,HL; DAA; CPL; CCF; SCF; DI; EI; RLA; RRA; RLCA; RRCA; JP (HL)
0, 0,                                                                   pc:4
NOPD; sro r; BIT b,r; SET b,r; RES b,r; NEG; IM 0/1/2                   pc:4,pc+1:4
LD A,I; LD A,R; LD I,A; LD R,A                                          pc:4,pc+1:5
INC/DEC dd; LD SP,HL                                                    pc:6
INC/DEC (HL)                                                            pc:4,hl:3,hl:1,hl(write):3
INC/DEC (ii+n)                                                          pc:4,pc+1:4,pc+2:3,pc+2:1 x 5,ii+n:3,ii+n:1,ii+n(write):3
ADD HL,dd                                                               pc:11
ADC/SBC HL,dd                                                           pc:4,pc+1:11
LD r,n;alo a,n                                                          pc:4,pc+1:3
LD r,(ss); LD (ss),r                                                    pc:4,ss:3
LD r,(ii+n); LD (ii+n),r; alo A,(ii+n)                                  pc:4,pc+1:4,pc+2:3,pc+2:1 x 5,ii+n:3
alo A,(HL)                                                              pc:4,hl:3
BIT b,(HL)                                                              pc:4,pc+1:4,hl:3,hl:1
BIT b,(ii+n)                                                            pc:4,pc+1:4,pc+2:3,pc+3:3,pc+3:1 x 2,ii+n:3,ii+n:1
LD dd,nn; JP nn; JP cc,nn                                               pc:4,pc+1:3,pc+2:3
LD (HL),n                                                               pc:4,pc+1:3,hl:3
LD (ii+n),n                                                             pc:4,pc+1:4,pc+2:3,pc+3:3,pc+3:1 x 2,ii+n:3
LD A,(nn); LD (nn),A                                                    pc:4,pc+1:3,pc+2:3,nn:3
LD HL,(nn); LD (nn),HL                                                  pc:4,pc+1:3,pc+2:3,nn:3,nn+1:3
LD dd,(nn); LD (nn),dd                                                  pc:4,pc+1:4,pc+2:3,pc+3:3,nn:3,nn+1:3
SET/RES/ROT b,(HL)                                                      pc:4,pc+1:4,hl:3,hl:1,hl(write):3
SET/RES/ROT b,(ii+n)                                                    pc:4,pc+1:4,pc+2:3,pc+3:3,pc+3:1 x 2,ii+n:3,ii+n:1,ii+n(write):3
POP dd; RET                                                             pc:4,sp:3,sp+1:3
RETI/RETN                                                               pc:4,pc+1:4,sp:3,sp+1:3
RET cc                                                                  pc:5,[sp:3,sp+1:3]
PUSH dd; RST n                                                          pc:5,sp-1:3,sp-2:3
CALL nn; CALL cc,nn                                                     pc:4,pc+1:3,pc+2:3,[pc+2:1,sp-1:3,sp-2:3]
JR n; JR cc,n                                                           pc:4,pc+1:3,[pc+1:1 x 5]
DJNZ n                                                                  pc:5,pc+1:3,[pc+1:1 x 5]
RLD; RRD                                                                pc:4,pc+1:4,hl:3,hl:1 x 4,hl(write):3
IN A,(n); OUT (n),A                                                     pc:4,pc+1:3,IO
IN r,(C); OUT (C),r                                                     pc:4,pc+1:4,IO
EX (SP),HL                                                              pc:4,sp:3,sp+1:4,sp(write):3,sp+1(write):3,sp+1(write):1 x 2
LDI/LDIR; LDD/LDDR                                                      pc:4,pc+1:4,hl:3,de:3,de:1 x 2,[de:1 x 5]
CPI/CPIR; CPD/CPDR                                                      pc:4,pc+1:4,hl:3,hl:1 x 5,[hl:1 x 5]
INI/INIR; IND/INDR                                                      pc:4,pc+1:5,IO,hl:3,[hl:1 x 5]
OUTI/OTIR; OUTD/OTDR                                                    pc:4,pc+1:5,hl:3,IO,[hl:1 x 5]
*/

// flags for adc and add
static uint8_t adcf[131072];
// flags for sub and sbc
static uint8_t sbcf[131072];
// flags for cp
static uint8_t cpf[65536];
// flags for CPD/CPI/CPDR/CPIR
static uint8_t cpf8b[65536];

static const uint16_t daatab[2048] = {
    0x0044,0x0100,0x0200,0x0304,0x0400,0x0504,0x0604,0x0700,0x0808,0x090c,0x1010,0x1114,0x1214,0x1310,0x1414,0x1510,
    0x1000,0x1104,0x1204,0x1300,0x1404,0x1500,0x1600,0x1704,0x180c,0x1908,0x2030,0x2134,0x2234,0x2330,0x2434,0x2530,
    0x2020,0x2124,0x2224,0x2320,0x2424,0x2520,0x2620,0x2724,0x282c,0x2928,0x3034,0x3130,0x3230,0x3334,0x3430,0x3534,
    0x3024,0x3120,0x3220,0x3324,0x3420,0x3524,0x3624,0x3720,0x3828,0x392c,0x4010,0x4114,0x4214,0x4310,0x4414,0x4510,
    0x4000,0x4104,0x4204,0x4300,0x4404,0x4500,0x4600,0x4704,0x480c,0x4908,0x5014,0x5110,0x5210,0x5314,0x5410,0x5514,
    0x5004,0x5100,0x5200,0x5304,0x5400,0x5504,0x5604,0x5700,0x5808,0x590c,0x6034,0x6130,0x6230,0x6334,0x6430,0x6534,
    0x6024,0x6120,0x6220,0x6324,0x6420,0x6524,0x6624,0x6720,0x6828,0x692c,0x7030,0x7134,0x7234,0x7330,0x7434,0x7530,
    0x7020,0x7124,0x7224,0x7320,0x7424,0x7520,0x7620,0x7724,0x782c,0x7928,0x8090,0x8194,0x8294,0x8390,0x8494,0x8590,
    0x8080,0x8184,0x8284,0x8380,0x8484,0x8580,0x8680,0x8784,0x888c,0x8988,0x9094,0x9190,0x9290,0x9394,0x9490,0x9594,
    0x9084,0x9180,0x9280,0x9384,0x9480,0x9584,0x9684,0x9780,0x9888,0x998c,0x0055,0x0111,0x0211,0x0315,0x0411,0x0515,
    0x0045,0x0101,0x0201,0x0305,0x0401,0x0505,0x0605,0x0701,0x0809,0x090d,0x1011,0x1115,0x1215,0x1311,0x1415,0x1511,
    0x1001,0x1105,0x1205,0x1301,0x1405,0x1501,0x1601,0x1705,0x180d,0x1909,0x2031,0x2135,0x2235,0x2331,0x2435,0x2531,
    0x2021,0x2125,0x2225,0x2321,0x2425,0x2521,0x2621,0x2725,0x282d,0x2929,0x3035,0x3131,0x3231,0x3335,0x3431,0x3535,
    0x3025,0x3121,0x3221,0x3325,0x3421,0x3525,0x3625,0x3721,0x3829,0x392d,0x4011,0x4115,0x4215,0x4311,0x4415,0x4511,
    0x4001,0x4105,0x4205,0x4301,0x4405,0x4501,0x4601,0x4705,0x480d,0x4909,0x5015,0x5111,0x5211,0x5315,0x5411,0x5515,
    0x5005,0x5101,0x5201,0x5305,0x5401,0x5505,0x5605,0x5701,0x5809,0x590d,0x6035,0x6131,0x6231,0x6335,0x6431,0x6535,
    0x6025,0x6121,0x6221,0x6325,0x6421,0x6525,0x6625,0x6721,0x6829,0x692d,0x7031,0x7135,0x7235,0x7331,0x7435,0x7531,
    0x7021,0x7125,0x7225,0x7321,0x7425,0x7521,0x7621,0x7725,0x782d,0x7929,0x8091,0x8195,0x8295,0x8391,0x8495,0x8591,
    0x8081,0x8185,0x8285,0x8381,0x8485,0x8581,0x8681,0x8785,0x888d,0x8989,0x9095,0x9191,0x9291,0x9395,0x9491,0x9595,
    0x9085,0x9181,0x9281,0x9385,0x9481,0x9585,0x9685,0x9781,0x9889,0x998d,0xa0b5,0xa1b1,0xa2b1,0xa3b5,0xa4b1,0xa5b5,
    0xa0a5,0xa1a1,0xa2a1,0xa3a5,0xa4a1,0xa5a5,0xa6a5,0xa7a1,0xa8a9,0xa9ad,0xb0b1,0xb1b5,0xb2b5,0xb3b1,0xb4b5,0xb5b1,
    0xb0a1,0xb1a5,0xb2a5,0xb3a1,0xb4a5,0xb5a1,0xb6a1,0xb7a5,0xb8ad,0xb9a9,0xc095,0xc191,0xc291,0xc395,0xc491,0xc595,
    0xc085,0xc181,0xc281,0xc385,0xc481,0xc585,0xc685,0xc781,0xc889,0xc98d,0xd091,0xd195,0xd295,0xd391,0xd495,0xd591,
    0xd081,0xd185,0xd285,0xd381,0xd485,0xd581,0xd681,0xd785,0xd88d,0xd989,0xe0b1,0xe1b5,0xe2b5,0xe3b1,0xe4b5,0xe5b1,
    0xe0a1,0xe1a5,0xe2a5,0xe3a1,0xe4a5,0xe5a1,0xe6a1,0xe7a5,0xe8ad,0xe9a9,0xf0b5,0xf1b1,0xf2b1,0xf3b5,0xf4b1,0xf5b5,
    0xf0a5,0xf1a1,0xf2a1,0xf3a5,0xf4a1,0xf5a5,0xf6a5,0xf7a1,0xf8a9,0xf9ad,0x0055,0x0111,0x0211,0x0315,0x0411,0x0515,
    0x0045,0x0101,0x0201,0x0305,0x0401,0x0505,0x0605,0x0701,0x0809,0x090d,0x1011,0x1115,0x1215,0x1311,0x1415,0x1511,
    0x1001,0x1105,0x1205,0x1301,0x1405,0x1501,0x1601,0x1705,0x180d,0x1909,0x2031,0x2135,0x2235,0x2331,0x2435,0x2531,
    0x2021,0x2125,0x2225,0x2321,0x2425,0x2521,0x2621,0x2725,0x282d,0x2929,0x3035,0x3131,0x3231,0x3335,0x3431,0x3535,
    0x3025,0x3121,0x3221,0x3325,0x3421,0x3525,0x3625,0x3721,0x3829,0x392d,0x4011,0x4115,0x4215,0x4311,0x4415,0x4511,
    0x4001,0x4105,0x4205,0x4301,0x4405,0x4501,0x4601,0x4705,0x480d,0x4909,0x5015,0x5111,0x5211,0x5315,0x5411,0x5515,
    0x5005,0x5101,0x5201,0x5305,0x5401,0x5505,0x5605,0x5701,0x5809,0x590d,0x6035,0x6131,0x6231,0x6335,0x6431,0x6535,
    0x0046,0x0102,0x0202,0x0306,0x0402,0x0506,0x0606,0x0702,0x080a,0x090e,0x0402,0x0506,0x0606,0x0702,0x080a,0x090e,
    0x1002,0x1106,0x1206,0x1302,0x1406,0x1502,0x1602,0x1706,0x180e,0x190a,0x1406,0x1502,0x1602,0x1706,0x180e,0x190a,
    0x2022,0x2126,0x2226,0x2322,0x2426,0x2522,0x2622,0x2726,0x282e,0x292a,0x2426,0x2522,0x2622,0x2726,0x282e,0x292a,
    0x3026,0x3122,0x3222,0x3326,0x3422,0x3526,0x3626,0x3722,0x382a,0x392e,0x3422,0x3526,0x3626,0x3722,0x382a,0x392e,
    0x4002,0x4106,0x4206,0x4302,0x4406,0x4502,0x4602,0x4706,0x480e,0x490a,0x4406,0x4502,0x4602,0x4706,0x480e,0x490a,
    0x5006,0x5102,0x5202,0x5306,0x5402,0x5506,0x5606,0x5702,0x580a,0x590e,0x5402,0x5506,0x5606,0x5702,0x580a,0x590e,
    0x6026,0x6122,0x6222,0x6326,0x6422,0x6526,0x6626,0x6722,0x682a,0x692e,0x6422,0x6526,0x6626,0x6722,0x682a,0x692e,
    0x7022,0x7126,0x7226,0x7322,0x7426,0x7522,0x7622,0x7726,0x782e,0x792a,0x7426,0x7522,0x7622,0x7726,0x782e,0x792a,
    0x8082,0x8186,0x8286,0x8382,0x8486,0x8582,0x8682,0x8786,0x888e,0x898a,0x8486,0x8582,0x8682,0x8786,0x888e,0x898a,
    0x9086,0x9182,0x9282,0x9386,0x9482,0x9586,0x9686,0x9782,0x988a,0x998e,0x3423,0x3527,0x3627,0x3723,0x382b,0x392f,
    0x4003,0x4107,0x4207,0x4303,0x4407,0x4503,0x4603,0x4707,0x480f,0x490b,0x4407,0x4503,0x4603,0x4707,0x480f,0x490b,
    0x5007,0x5103,0x5203,0x5307,0x5403,0x5507,0x5607,0x5703,0x580b,0x590f,0x5403,0x5507,0x5607,0x5703,0x580b,0x590f,
    0x6027,0x6123,0x6223,0x6327,0x6423,0x6527,0x6627,0x6723,0x682b,0x692f,0x6423,0x6527,0x6627,0x6723,0x682b,0x692f,
    0x7023,0x7127,0x7227,0x7323,0x7427,0x7523,0x7623,0x7727,0x782f,0x792b,0x7427,0x7523,0x7623,0x7727,0x782f,0x792b,
    0x8083,0x8187,0x8287,0x8383,0x8487,0x8583,0x8683,0x8787,0x888f,0x898b,0x8487,0x8583,0x8683,0x8787,0x888f,0x898b,
    0x9087,0x9183,0x9283,0x9387,0x9483,0x9587,0x9687,0x9783,0x988b,0x998f,0x9483,0x9587,0x9687,0x9783,0x988b,0x998f,
    0xa0a7,0xa1a3,0xa2a3,0xa3a7,0xa4a3,0xa5a7,0xa6a7,0xa7a3,0xa8ab,0xa9af,0xa4a3,0xa5a7,0xa6a7,0xa7a3,0xa8ab,0xa9af,
    0xb0a3,0xb1a7,0xb2a7,0xb3a3,0xb4a7,0xb5a3,0xb6a3,0xb7a7,0xb8af,0xb9ab,0xb4a7,0xb5a3,0xb6a3,0xb7a7,0xb8af,0xb9ab,
    0xc087,0xc183,0xc283,0xc387,0xc483,0xc587,0xc687,0xc783,0xc88b,0xc98f,0xc483,0xc587,0xc687,0xc783,0xc88b,0xc98f,
    0xd083,0xd187,0xd287,0xd383,0xd487,0xd583,0xd683,0xd787,0xd88f,0xd98b,0xd487,0xd583,0xd683,0xd787,0xd88f,0xd98b,
    0xe0a3,0xe1a7,0xe2a7,0xe3a3,0xe4a7,0xe5a3,0xe6a3,0xe7a7,0xe8af,0xe9ab,0xe4a7,0xe5a3,0xe6a3,0xe7a7,0xe8af,0xe9ab,
    0xf0a7,0xf1a3,0xf2a3,0xf3a7,0xf4a3,0xf5a7,0xf6a7,0xf7a3,0xf8ab,0xf9af,0xf4a3,0xf5a7,0xf6a7,0xf7a3,0xf8ab,0xf9af,
    0x0047,0x0103,0x0203,0x0307,0x0403,0x0507,0x0607,0x0703,0x080b,0x090f,0x0403,0x0507,0x0607,0x0703,0x080b,0x090f,
    0x1003,0x1107,0x1207,0x1303,0x1407,0x1503,0x1603,0x1707,0x180f,0x190b,0x1407,0x1503,0x1603,0x1707,0x180f,0x190b,
    0x2023,0x2127,0x2227,0x2323,0x2427,0x2523,0x2623,0x2727,0x282f,0x292b,0x2427,0x2523,0x2623,0x2727,0x282f,0x292b,
    0x3027,0x3123,0x3223,0x3327,0x3423,0x3527,0x3627,0x3723,0x382b,0x392f,0x3423,0x3527,0x3627,0x3723,0x382b,0x392f,
    0x4003,0x4107,0x4207,0x4303,0x4407,0x4503,0x4603,0x4707,0x480f,0x490b,0x4407,0x4503,0x4603,0x4707,0x480f,0x490b,
    0x5007,0x5103,0x5203,0x5307,0x5403,0x5507,0x5607,0x5703,0x580b,0x590f,0x5403,0x5507,0x5607,0x5703,0x580b,0x590f,
    0x6027,0x6123,0x6223,0x6327,0x6423,0x6527,0x6627,0x6723,0x682b,0x692f,0x6423,0x6527,0x6627,0x6723,0x682b,0x692f,
    0x7023,0x7127,0x7227,0x7323,0x7427,0x7523,0x7623,0x7727,0x782f,0x792b,0x7427,0x7523,0x7623,0x7727,0x782f,0x792b,
    0x8083,0x8187,0x8287,0x8383,0x8487,0x8583,0x8683,0x8787,0x888f,0x898b,0x8487,0x8583,0x8683,0x8787,0x888f,0x898b,
    0x9087,0x9183,0x9283,0x9387,0x9483,0x9587,0x9687,0x9783,0x988b,0x998f,0x9483,0x9587,0x9687,0x9783,0x988b,0x998f,
    0x0604,0x0700,0x0808,0x090c,0x0a0c,0x0b08,0x0c0c,0x0d08,0x0e08,0x0f0c,0x1010,0x1114,0x1214,0x1310,0x1414,0x1510,
    0x1600,0x1704,0x180c,0x1908,0x1a08,0x1b0c,0x1c08,0x1d0c,0x1e0c,0x1f08,0x2030,0x2134,0x2234,0x2330,0x2434,0x2530,
    0x2620,0x2724,0x282c,0x2928,0x2a28,0x2b2c,0x2c28,0x2d2c,0x2e2c,0x2f28,0x3034,0x3130,0x3230,0x3334,0x3430,0x3534,
    0x3624,0x3720,0x3828,0x392c,0x3a2c,0x3b28,0x3c2c,0x3d28,0x3e28,0x3f2c,0x4010,0x4114,0x4214,0x4310,0x4414,0x4510,
    0x4600,0x4704,0x480c,0x4908,0x4a08,0x4b0c,0x4c08,0x4d0c,0x4e0c,0x4f08,0x5014,0x5110,0x5210,0x5314,0x5410,0x5514,
    0x5604,0x5700,0x5808,0x590c,0x5a0c,0x5b08,0x5c0c,0x5d08,0x5e08,0x5f0c,0x6034,0x6130,0x6230,0x6334,0x6430,0x6534,
    0x6624,0x6720,0x6828,0x692c,0x6a2c,0x6b28,0x6c2c,0x6d28,0x6e28,0x6f2c,0x7030,0x7134,0x7234,0x7330,0x7434,0x7530,
    0x7620,0x7724,0x782c,0x7928,0x7a28,0x7b2c,0x7c28,0x7d2c,0x7e2c,0x7f28,0x8090,0x8194,0x8294,0x8390,0x8494,0x8590,
    0x8680,0x8784,0x888c,0x8988,0x8a88,0x8b8c,0x8c88,0x8d8c,0x8e8c,0x8f88,0x9094,0x9190,0x9290,0x9394,0x9490,0x9594,
    0x9684,0x9780,0x9888,0x998c,0x9a8c,0x9b88,0x9c8c,0x9d88,0x9e88,0x9f8c,0x0055,0x0111,0x0211,0x0315,0x0411,0x0515,
    0x0605,0x0701,0x0809,0x090d,0x0a0d,0x0b09,0x0c0d,0x0d09,0x0e09,0x0f0d,0x1011,0x1115,0x1215,0x1311,0x1415,0x1511,
    0x1601,0x1705,0x180d,0x1909,0x1a09,0x1b0d,0x1c09,0x1d0d,0x1e0d,0x1f09,0x2031,0x2135,0x2235,0x2331,0x2435,0x2531,
    0x2621,0x2725,0x282d,0x2929,0x2a29,0x2b2d,0x2c29,0x2d2d,0x2e2d,0x2f29,0x3035,0x3131,0x3231,0x3335,0x3431,0x3535,
    0x3625,0x3721,0x3829,0x392d,0x3a2d,0x3b29,0x3c2d,0x3d29,0x3e29,0x3f2d,0x4011,0x4115,0x4215,0x4311,0x4415,0x4511,
    0x4601,0x4705,0x480d,0x4909,0x4a09,0x4b0d,0x4c09,0x4d0d,0x4e0d,0x4f09,0x5015,0x5111,0x5211,0x5315,0x5411,0x5515,
    0x5605,0x5701,0x5809,0x590d,0x5a0d,0x5b09,0x5c0d,0x5d09,0x5e09,0x5f0d,0x6035,0x6131,0x6231,0x6335,0x6431,0x6535,
    0x6625,0x6721,0x6829,0x692d,0x6a2d,0x6b29,0x6c2d,0x6d29,0x6e29,0x6f2d,0x7031,0x7135,0x7235,0x7331,0x7435,0x7531,
    0x7621,0x7725,0x782d,0x7929,0x7a29,0x7b2d,0x7c29,0x7d2d,0x7e2d,0x7f29,0x8091,0x8195,0x8295,0x8391,0x8495,0x8591,
    0x8681,0x8785,0x888d,0x8989,0x8a89,0x8b8d,0x8c89,0x8d8d,0x8e8d,0x8f89,0x9095,0x9191,0x9291,0x9395,0x9491,0x9595,
    0x9685,0x9781,0x9889,0x998d,0x9a8d,0x9b89,0x9c8d,0x9d89,0x9e89,0x9f8d,0xa0b5,0xa1b1,0xa2b1,0xa3b5,0xa4b1,0xa5b5,
    0xa6a5,0xa7a1,0xa8a9,0xa9ad,0xaaad,0xaba9,0xacad,0xada9,0xaea9,0xafad,0xb0b1,0xb1b5,0xb2b5,0xb3b1,0xb4b5,0xb5b1,
    0xb6a1,0xb7a5,0xb8ad,0xb9a9,0xbaa9,0xbbad,0xbca9,0xbdad,0xbead,0xbfa9,0xc095,0xc191,0xc291,0xc395,0xc491,0xc595,
    0xc685,0xc781,0xc889,0xc98d,0xca8d,0xcb89,0xcc8d,0xcd89,0xce89,0xcf8d,0xd091,0xd195,0xd295,0xd391,0xd495,0xd591,
    0xd681,0xd785,0xd88d,0xd989,0xda89,0xdb8d,0xdc89,0xdd8d,0xde8d,0xdf89,0xe0b1,0xe1b5,0xe2b5,0xe3b1,0xe4b5,0xe5b1,
    0xe6a1,0xe7a5,0xe8ad,0xe9a9,0xeaa9,0xebad,0xeca9,0xedad,0xeead,0xefa9,0xf0b5,0xf1b1,0xf2b1,0xf3b5,0xf4b1,0xf5b5,
    0xf6a5,0xf7a1,0xf8a9,0xf9ad,0xfaad,0xfba9,0xfcad,0xfda9,0xfea9,0xffad,0x0055,0x0111,0x0211,0x0315,0x0411,0x0515,
    0x0605,0x0701,0x0809,0x090d,0x0a0d,0x0b09,0x0c0d,0x0d09,0x0e09,0x0f0d,0x1011,0x1115,0x1215,0x1311,0x1415,0x1511,
    0x1601,0x1705,0x180d,0x1909,0x1a09,0x1b0d,0x1c09,0x1d0d,0x1e0d,0x1f09,0x2031,0x2135,0x2235,0x2331,0x2435,0x2531,
    0x2621,0x2725,0x282d,0x2929,0x2a29,0x2b2d,0x2c29,0x2d2d,0x2e2d,0x2f29,0x3035,0x3131,0x3231,0x3335,0x3431,0x3535,
    0x3625,0x3721,0x3829,0x392d,0x3a2d,0x3b29,0x3c2d,0x3d29,0x3e29,0x3f2d,0x4011,0x4115,0x4215,0x4311,0x4415,0x4511,
    0x4601,0x4705,0x480d,0x4909,0x4a09,0x4b0d,0x4c09,0x4d0d,0x4e0d,0x4f09,0x5015,0x5111,0x5211,0x5315,0x5411,0x5515,
    0x5605,0x5701,0x5809,0x590d,0x5a0d,0x5b09,0x5c0d,0x5d09,0x5e09,0x5f0d,0x6035,0x6131,0x6231,0x6335,0x6431,0x6535,
    0xfabe,0xfbba,0xfcbe,0xfdba,0xfeba,0xffbe,0x0046,0x0102,0x0202,0x0306,0x0402,0x0506,0x0606,0x0702,0x080a,0x090e,
    0x0a1e,0x0b1a,0x0c1e,0x0d1a,0x0e1a,0x0f1e,0x1002,0x1106,0x1206,0x1302,0x1406,0x1502,0x1602,0x1706,0x180e,0x190a,
    0x1a1a,0x1b1e,0x1c1a,0x1d1e,0x1e1e,0x1f1a,0x2022,0x2126,0x2226,0x2322,0x2426,0x2522,0x2622,0x2726,0x282e,0x292a,
    0x2a3a,0x2b3e,0x2c3a,0x2d3e,0x2e3e,0x2f3a,0x3026,0x3122,0x3222,0x3326,0x3422,0x3526,0x3626,0x3722,0x382a,0x392e,
    0x3a3e,0x3b3a,0x3c3e,0x3d3a,0x3e3a,0x3f3e,0x4002,0x4106,0x4206,0x4302,0x4406,0x4502,0x4602,0x4706,0x480e,0x490a,
    0x4a1a,0x4b1e,0x4c1a,0x4d1e,0x4e1e,0x4f1a,0x5006,0x5102,0x5202,0x5306,0x5402,0x5506,0x5606,0x5702,0x580a,0x590e,
    0x5a1e,0x5b1a,0x5c1e,0x5d1a,0x5e1a,0x5f1e,0x6026,0x6122,0x6222,0x6326,0x6422,0x6526,0x6626,0x6722,0x682a,0x692e,
    0x6a3e,0x6b3a,0x6c3e,0x6d3a,0x6e3a,0x6f3e,0x7022,0x7126,0x7226,0x7322,0x7426,0x7522,0x7622,0x7726,0x782e,0x792a,
    0x7a3a,0x7b3e,0x7c3a,0x7d3e,0x7e3e,0x7f3a,0x8082,0x8186,0x8286,0x8382,0x8486,0x8582,0x8682,0x8786,0x888e,0x898a,
    0x8a9a,0x8b9e,0x8c9a,0x8d9e,0x8e9e,0x8f9a,0x9086,0x9182,0x9282,0x9386,0x3423,0x3527,0x3627,0x3723,0x382b,0x392f,
    0x3a3f,0x3b3b,0x3c3f,0x3d3b,0x3e3b,0x3f3f,0x4003,0x4107,0x4207,0x4303,0x4407,0x4503,0x4603,0x4707,0x480f,0x490b,
    0x4a1b,0x4b1f,0x4c1b,0x4d1f,0x4e1f,0x4f1b,0x5007,0x5103,0x5203,0x5307,0x5403,0x5507,0x5607,0x5703,0x580b,0x590f,
    0x5a1f,0x5b1b,0x5c1f,0x5d1b,0x5e1b,0x5f1f,0x6027,0x6123,0x6223,0x6327,0x6423,0x6527,0x6627,0x6723,0x682b,0x692f,
    0x6a3f,0x6b3b,0x6c3f,0x6d3b,0x6e3b,0x6f3f,0x7023,0x7127,0x7227,0x7323,0x7427,0x7523,0x7623,0x7727,0x782f,0x792b,
    0x7a3b,0x7b3f,0x7c3b,0x7d3f,0x7e3f,0x7f3b,0x8083,0x8187,0x8287,0x8383,0x8487,0x8583,0x8683,0x8787,0x888f,0x898b,
    0x8a9b,0x8b9f,0x8c9b,0x8d9f,0x8e9f,0x8f9b,0x9087,0x9183,0x9283,0x9387,0x9483,0x9587,0x9687,0x9783,0x988b,0x998f,
    0x9a9f,0x9b9b,0x9c9f,0x9d9b,0x9e9b,0x9f9f,0xa0a7,0xa1a3,0xa2a3,0xa3a7,0xa4a3,0xa5a7,0xa6a7,0xa7a3,0xa8ab,0xa9af,
    0xaabf,0xabbb,0xacbf,0xadbb,0xaebb,0xafbf,0xb0a3,0xb1a7,0xb2a7,0xb3a3,0xb4a7,0xb5a3,0xb6a3,0xb7a7,0xb8af,0xb9ab,
    0xbabb,0xbbbf,0xbcbb,0xbdbf,0xbebf,0xbfbb,0xc087,0xc183,0xc283,0xc387,0xc483,0xc587,0xc687,0xc783,0xc88b,0xc98f,
    0xca9f,0xcb9b,0xcc9f,0xcd9b,0xce9b,0xcf9f,0xd083,0xd187,0xd287,0xd383,0xd487,0xd583,0xd683,0xd787,0xd88f,0xd98b,
    0xda9b,0xdb9f,0xdc9b,0xdd9f,0xde9f,0xdf9b,0xe0a3,0xe1a7,0xe2a7,0xe3a3,0xe4a7,0xe5a3,0xe6a3,0xe7a7,0xe8af,0xe9ab,
    0xeabb,0xebbf,0xecbb,0xedbf,0xeebf,0xefbb,0xf0a7,0xf1a3,0xf2a3,0xf3a7,0xf4a3,0xf5a7,0xf6a7,0xf7a3,0xf8ab,0xf9af,
    0xfabf,0xfbbb,0xfcbf,0xfdbb,0xfebb,0xffbf,0x0047,0x0103,0x0203,0x0307,0x0403,0x0507,0x0607,0x0703,0x080b,0x090f,
    0x0a1f,0x0b1b,0x0c1f,0x0d1b,0x0e1b,0x0f1f,0x1003,0x1107,0x1207,0x1303,0x1407,0x1503,0x1603,0x1707,0x180f,0x190b,
    0x1a1b,0x1b1f,0x1c1b,0x1d1f,0x1e1f,0x1f1b,0x2023,0x2127,0x2227,0x2323,0x2427,0x2523,0x2623,0x2727,0x282f,0x292b,
    0x2a3b,0x2b3f,0x2c3b,0x2d3f,0x2e3f,0x2f3b,0x3027,0x3123,0x3223,0x3327,0x3423,0x3527,0x3627,0x3723,0x382b,0x392f,
    0x3a3f,0x3b3b,0x3c3f,0x3d3b,0x3e3b,0x3f3f,0x4003,0x4107,0x4207,0x4303,0x4407,0x4503,0x4603,0x4707,0x480f,0x490b,
    0x4a1b,0x4b1f,0x4c1b,0x4d1f,0x4e1f,0x4f1b,0x5007,0x5103,0x5203,0x5307,0x5403,0x5507,0x5607,0x5703,0x580b,0x590f,
    0x5a1f,0x5b1b,0x5c1f,0x5d1b,0x5e1b,0x5f1f,0x6027,0x6123,0x6223,0x6327,0x6423,0x6527,0x6627,0x6723,0x682b,0x692f,
    0x6a3f,0x6b3b,0x6c3f,0x6d3b,0x6e3b,0x6f3f,0x7023,0x7127,0x7227,0x7323,0x7427,0x7523,0x7623,0x7727,0x782f,0x792b,
    0x7a3b,0x7b3f,0x7c3b,0x7d3f,0x7e3f,0x7f3b,0x8083,0x8187,0x8287,0x8383,0x8487,0x8583,0x8683,0x8787,0x888f,0x898b,
    0x8a9b,0x8b9f,0x8c9b,0x8d9f,0x8e9f,0x8f9b,0x9087,0x9183,0x9283,0x9387,0x9483,0x9587,0x9687,0x9783,0x988b,0x998f
};

// for rlc r. may be for rlca (0x3B mask)
static const uint8_t rlcf[0x100] = {
        0x44,0x00,0x00,0x04,0x08,0x0c,0x0c,0x08,0x00,0x04,0x04,0x00,0x0c,0x08,0x08,0x0c,
        0x20,0x24,0x24,0x20,0x2c,0x28,0x28,0x2c,0x24,0x20,0x20,0x24,0x28,0x2c,0x2c,0x28,
        0x00,0x04,0x04,0x00,0x0c,0x08,0x08,0x0c,0x04,0x00,0x00,0x04,0x08,0x0c,0x0c,0x08,
        0x24,0x20,0x20,0x24,0x28,0x2c,0x2c,0x28,0x20,0x24,0x24,0x20,0x2c,0x28,0x28,0x2c,
        0x80,0x84,0x84,0x80,0x8c,0x88,0x88,0x8c,0x84,0x80,0x80,0x84,0x88,0x8c,0x8c,0x88,
        0xa4,0xa0,0xa0,0xa4,0xa8,0xac,0xac,0xa8,0xa0,0xa4,0xa4,0xa0,0xac,0xa8,0xa8,0xac,
        0x84,0x80,0x80,0x84,0x88,0x8c,0x8c,0x88,0x80,0x84,0x84,0x80,0x8c,0x88,0x88,0x8c,
        0xa0,0xa4,0xa4,0xa0,0xac,0xa8,0xa8,0xac,0xa4,0xa0,0xa0,0xa4,0xa8,0xac,0xac,0xa8,
        0x01,0x05,0x05,0x01,0x0d,0x09,0x09,0x0d,0x05,0x01,0x01,0x05,0x09,0x0d,0x0d,0x09,
        0x25,0x21,0x21,0x25,0x29,0x2d,0x2d,0x29,0x21,0x25,0x25,0x21,0x2d,0x29,0x29,0x2d,
        0x05,0x01,0x01,0x05,0x09,0x0d,0x0d,0x09,0x01,0x05,0x05,0x01,0x0d,0x09,0x09,0x0d,
        0x21,0x25,0x25,0x21,0x2d,0x29,0x29,0x2d,0x25,0x21,0x21,0x25,0x29,0x2d,0x2d,0x29,
        0x85,0x81,0x81,0x85,0x89,0x8d,0x8d,0x89,0x81,0x85,0x85,0x81,0x8d,0x89,0x89,0x8d,
        0xa1,0xa5,0xa5,0xa1,0xad,0xa9,0xa9,0xad,0xa5,0xa1,0xa1,0xa5,0xa9,0xad,0xad,0xa9,
        0x81,0x85,0x85,0x81,0x8d,0x89,0x89,0x8d,0x85,0x81,0x81,0x85,0x89,0x8d,0x8d,0x89,
        0xa5,0xa1,0xa1,0xa5,0xa9,0xad,0xad,0xa9,0xa1,0xa5,0xa5,0xa1,0xad,0xa9,0xa9,0xad
};

static const uint8_t rrcf[] = {
        0x44,0x81,0x00,0x85,0x00,0x85,0x04,0x81,0x00,0x85,0x04,0x81,0x04,0x81,0x00,0x85,
        0x08,0x8d,0x0c,0x89,0x0c,0x89,0x08,0x8d,0x0c,0x89,0x08,0x8d,0x08,0x8d,0x0c,0x89,
        0x00,0x85,0x04,0x81,0x04,0x81,0x00,0x85,0x04,0x81,0x00,0x85,0x00,0x85,0x04,0x81,
        0x0c,0x89,0x08,0x8d,0x08,0x8d,0x0c,0x89,0x08,0x8d,0x0c,0x89,0x0c,0x89,0x08,0x8d,
        0x20,0xa5,0x24,0xa1,0x24,0xa1,0x20,0xa5,0x24,0xa1,0x20,0xa5,0x20,0xa5,0x24,0xa1,
        0x2c,0xa9,0x28,0xad,0x28,0xad,0x2c,0xa9,0x28,0xad,0x2c,0xa9,0x2c,0xa9,0x28,0xad,
        0x24,0xa1,0x20,0xa5,0x20,0xa5,0x24,0xa1,0x20,0xa5,0x24,0xa1,0x24,0xa1,0x20,0xa5,
        0x28,0xad,0x2c,0xa9,0x2c,0xa9,0x28,0xad,0x2c,0xa9,0x28,0xad,0x28,0xad,0x2c,0xa9,
        0x00,0x85,0x04,0x81,0x04,0x81,0x00,0x85,0x04,0x81,0x00,0x85,0x00,0x85,0x04,0x81,
        0x0c,0x89,0x08,0x8d,0x08,0x8d,0x0c,0x89,0x08,0x8d,0x0c,0x89,0x0c,0x89,0x08,0x8d,
        0x04,0x81,0x00,0x85,0x00,0x85,0x04,0x81,0x00,0x85,0x04,0x81,0x04,0x81,0x00,0x85,
        0x08,0x8d,0x0c,0x89,0x0c,0x89,0x08,0x8d,0x0c,0x89,0x08,0x8d,0x08,0x8d,0x0c,0x89,
        0x24,0xa1,0x20,0xa5,0x20,0xa5,0x24,0xa1,0x20,0xa5,0x24,0xa1,0x24,0xa1,0x20,0xa5,
        0x28,0xad,0x2c,0xa9,0x2c,0xa9,0x28,0xad,0x2c,0xa9,0x28,0xad,0x28,0xad,0x2c,0xa9,
        0x20,0xa5,0x24,0xa1,0x24,0xa1,0x20,0xa5,0x24,0xa1,0x20,0xa5,0x20,0xa5,0x24,0xa1,
        0x2c,0xa9,0x28,0xad,0x28,0xad,0x2c,0xa9,0x28,0xad,0x2c,0xa9,0x2c,0xa9,0x28,0xad
};

static uint8_t rrcaf[256] = {
        0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,
        0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,
        0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,
        0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,
        0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,
        0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,
        0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,
        0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,
        0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,
        0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,
        0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,
        0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,0x08,0x09,
        0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,
        0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,
        0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,0x20,0x21,
        0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29,0x28,0x29
};

static const uint8_t _rl[] = {
        // rl0
        0x44,0x00,0x00,0x04,0x08,0x0c,0x0c,0x08,0x00,0x04,0x04,0x00,0x0c,0x08,0x08,0x0c,
        0x20,0x24,0x24,0x20,0x2c,0x28,0x28,0x2c,0x24,0x20,0x20,0x24,0x28,0x2c,0x2c,0x28,
        0x00,0x04,0x04,0x00,0x0c,0x08,0x08,0x0c,0x04,0x00,0x00,0x04,0x08,0x0c,0x0c,0x08,
        0x24,0x20,0x20,0x24,0x28,0x2c,0x2c,0x28,0x20,0x24,0x24,0x20,0x2c,0x28,0x28,0x2c,
        0x80,0x84,0x84,0x80,0x8c,0x88,0x88,0x8c,0x84,0x80,0x80,0x84,0x88,0x8c,0x8c,0x88,
        0xa4,0xa0,0xa0,0xa4,0xa8,0xac,0xac,0xa8,0xa0,0xa4,0xa4,0xa0,0xac,0xa8,0xa8,0xac,
        0x84,0x80,0x80,0x84,0x88,0x8c,0x8c,0x88,0x80,0x84,0x84,0x80,0x8c,0x88,0x88,0x8c,
        0xa0,0xa4,0xa4,0xa0,0xac,0xa8,0xa8,0xac,0xa4,0xa0,0xa0,0xa4,0xa8,0xac,0xac,0xa8,
        0x45,0x01,0x01,0x05,0x09,0x0d,0x0d,0x09,0x01,0x05,0x05,0x01,0x0d,0x09,0x09,0x0d,
        0x21,0x25,0x25,0x21,0x2d,0x29,0x29,0x2d,0x25,0x21,0x21,0x25,0x29,0x2d,0x2d,0x29,
        0x01,0x05,0x05,0x01,0x0d,0x09,0x09,0x0d,0x05,0x01,0x01,0x05,0x09,0x0d,0x0d,0x09,
        0x25,0x21,0x21,0x25,0x29,0x2d,0x2d,0x29,0x21,0x25,0x25,0x21,0x2d,0x29,0x29,0x2d,
        0x81,0x85,0x85,0x81,0x8d,0x89,0x89,0x8d,0x85,0x81,0x81,0x85,0x89,0x8d,0x8d,0x89,
        0xa5,0xa1,0xa1,0xa5,0xa9,0xad,0xad,0xa9,0xa1,0xa5,0xa5,0xa1,0xad,0xa9,0xa9,0xad,
        0x85,0x81,0x81,0x85,0x89,0x8d,0x8d,0x89,0x81,0x85,0x85,0x81,0x8d,0x89,0x89,0x8d,
        0xa1,0xa5,0xa5,0xa1,0xad,0xa9,0xa9,0xad,0xa5,0xa1,0xa1,0xa5,0xa9,0xad,0xad,0xa9,
        // rl1
        0x00,0x04,0x04,0x00,0x0c,0x08,0x08,0x0c,0x04,0x00,0x00,0x04,0x08,0x0c,0x0c,0x08,
        0x24,0x20,0x20,0x24,0x28,0x2c,0x2c,0x28,0x20,0x24,0x24,0x20,0x2c,0x28,0x28,0x2c,
        0x04,0x00,0x00,0x04,0x08,0x0c,0x0c,0x08,0x00,0x04,0x04,0x00,0x0c,0x08,0x08,0x0c,
        0x20,0x24,0x24,0x20,0x2c,0x28,0x28,0x2c,0x24,0x20,0x20,0x24,0x28,0x2c,0x2c,0x28,
        0x84,0x80,0x80,0x84,0x88,0x8c,0x8c,0x88,0x80,0x84,0x84,0x80,0x8c,0x88,0x88,0x8c,
        0xa0,0xa4,0xa4,0xa0,0xac,0xa8,0xa8,0xac,0xa4,0xa0,0xa0,0xa4,0xa8,0xac,0xac,0xa8,
        0x80,0x84,0x84,0x80,0x8c,0x88,0x88,0x8c,0x84,0x80,0x80,0x84,0x88,0x8c,0x8c,0x88,
        0xa4,0xa0,0xa0,0xa4,0xa8,0xac,0xac,0xa8,0xa0,0xa4,0xa4,0xa0,0xac,0xa8,0xa8,0xac,
        0x01,0x05,0x05,0x01,0x0d,0x09,0x09,0x0d,0x05,0x01,0x01,0x05,0x09,0x0d,0x0d,0x09,
        0x25,0x21,0x21,0x25,0x29,0x2d,0x2d,0x29,0x21,0x25,0x25,0x21,0x2d,0x29,0x29,0x2d,
        0x05,0x01,0x01,0x05,0x09,0x0d,0x0d,0x09,0x01,0x05,0x05,0x01,0x0d,0x09,0x09,0x0d,
        0x21,0x25,0x25,0x21,0x2d,0x29,0x29,0x2d,0x25,0x21,0x21,0x25,0x29,0x2d,0x2d,0x29,
        0x85,0x81,0x81,0x85,0x89,0x8d,0x8d,0x89,0x81,0x85,0x85,0x81,0x8d,0x89,0x89,0x8d,
        0xa1,0xa5,0xa5,0xa1,0xad,0xa9,0xa9,0xad,0xa5,0xa1,0xa1,0xa5,0xa9,0xad,0xad,0xa9,
        0x81,0x85,0x85,0x81,0x8d,0x89,0x89,0x8d,0x85,0x81,0x81,0x85,0x89,0x8d,0x8d,0x89,
        0xa5,0xa1,0xa1,0xa5,0xa9,0xad,0xad,0xa9,0xa1,0xa5,0xa5,0xa1,0xad,0xa9,0xa9,0xad
};

static const uint8_t _rr[] = {
        // rr0
        0x44,0x45,0x00,0x01,0x00,0x01,0x04,0x05,0x00,0x01,0x04,0x05,0x04,0x05,0x00,0x01,
        0x08,0x09,0x0c,0x0d,0x0c,0x0d,0x08,0x09,0x0c,0x0d,0x08,0x09,0x08,0x09,0x0c,0x0d,
        0x00,0x01,0x04,0x05,0x04,0x05,0x00,0x01,0x04,0x05,0x00,0x01,0x00,0x01,0x04,0x05,
        0x0c,0x0d,0x08,0x09,0x08,0x09,0x0c,0x0d,0x08,0x09,0x0c,0x0d,0x0c,0x0d,0x08,0x09,
        0x20,0x21,0x24,0x25,0x24,0x25,0x20,0x21,0x24,0x25,0x20,0x21,0x20,0x21,0x24,0x25,
        0x2c,0x2d,0x28,0x29,0x28,0x29,0x2c,0x2d,0x28,0x29,0x2c,0x2d,0x2c,0x2d,0x28,0x29,
        0x24,0x25,0x20,0x21,0x20,0x21,0x24,0x25,0x20,0x21,0x24,0x25,0x24,0x25,0x20,0x21,
        0x28,0x29,0x2c,0x2d,0x2c,0x2d,0x28,0x29,0x2c,0x2d,0x28,0x29,0x28,0x29,0x2c,0x2d,
        0x00,0x01,0x04,0x05,0x04,0x05,0x00,0x01,0x04,0x05,0x00,0x01,0x00,0x01,0x04,0x05,
        0x0c,0x0d,0x08,0x09,0x08,0x09,0x0c,0x0d,0x08,0x09,0x0c,0x0d,0x0c,0x0d,0x08,0x09,
        0x04,0x05,0x00,0x01,0x00,0x01,0x04,0x05,0x00,0x01,0x04,0x05,0x04,0x05,0x00,0x01,
        0x08,0x09,0x0c,0x0d,0x0c,0x0d,0x08,0x09,0x0c,0x0d,0x08,0x09,0x08,0x09,0x0c,0x0d,
        0x24,0x25,0x20,0x21,0x20,0x21,0x24,0x25,0x20,0x21,0x24,0x25,0x24,0x25,0x20,0x21,
        0x28,0x29,0x2c,0x2d,0x2c,0x2d,0x28,0x29,0x2c,0x2d,0x28,0x29,0x28,0x29,0x2c,0x2d,
        0x20,0x21,0x24,0x25,0x24,0x25,0x20,0x21,0x24,0x25,0x20,0x21,0x20,0x21,0x24,0x25,
        0x2c,0x2d,0x28,0x29,0x28,0x29,0x2c,0x2d,0x28,0x29,0x2c,0x2d,0x2c,0x2d,0x28,0x29,
        // rr1
        0x80,0x81,0x84,0x85,0x84,0x85,0x80,0x81,0x84,0x85,0x80,0x81,0x80,0x81,0x84,0x85,
        0x8c,0x8d,0x88,0x89,0x88,0x89,0x8c,0x8d,0x88,0x89,0x8c,0x8d,0x8c,0x8d,0x88,0x89,
        0x84,0x85,0x80,0x81,0x80,0x81,0x84,0x85,0x80,0x81,0x84,0x85,0x84,0x85,0x80,0x81,
        0x88,0x89,0x8c,0x8d,0x8c,0x8d,0x88,0x89,0x8c,0x8d,0x88,0x89,0x88,0x89,0x8c,0x8d,
        0xa4,0xa5,0xa0,0xa1,0xa0,0xa1,0xa4,0xa5,0xa0,0xa1,0xa4,0xa5,0xa4,0xa5,0xa0,0xa1,
        0xa8,0xa9,0xac,0xad,0xac,0xad,0xa8,0xa9,0xac,0xad,0xa8,0xa9,0xa8,0xa9,0xac,0xad,
        0xa0,0xa1,0xa4,0xa5,0xa4,0xa5,0xa0,0xa1,0xa4,0xa5,0xa0,0xa1,0xa0,0xa1,0xa4,0xa5,
        0xac,0xad,0xa8,0xa9,0xa8,0xa9,0xac,0xad,0xa8,0xa9,0xac,0xad,0xac,0xad,0xa8,0xa9,
        0x84,0x85,0x80,0x81,0x80,0x81,0x84,0x85,0x80,0x81,0x84,0x85,0x84,0x85,0x80,0x81,
        0x88,0x89,0x8c,0x8d,0x8c,0x8d,0x88,0x89,0x8c,0x8d,0x88,0x89,0x88,0x89,0x8c,0x8d,
        0x80,0x81,0x84,0x85,0x84,0x85,0x80,0x81,0x84,0x85,0x80,0x81,0x80,0x81,0x84,0x85,
        0x8c,0x8d,0x88,0x89,0x88,0x89,0x8c,0x8d,0x88,0x89,0x8c,0x8d,0x8c,0x8d,0x88,0x89,
        0xa0,0xa1,0xa4,0xa5,0xa4,0xa5,0xa0,0xa1,0xa4,0xa5,0xa0,0xa1,0xa0,0xa1,0xa4,0xa5,
        0xac,0xad,0xa8,0xa9,0xa8,0xa9,0xac,0xad,0xa8,0xa9,0xac,0xad,0xac,0xad,0xa8,0xa9,
        0xa4,0xa5,0xa0,0xa1,0xa0,0xa1,0xa4,0xa5,0xa0,0xa1,0xa4,0xa5,0xa4,0xa5,0xa0,0xa1,
        0xa8,0xa9,0xac,0xad,0xac,0xad,0xa8,0xa9,0xac,0xad,0xa8,0xa9,0xa8,0xa9,0xac,0xad
};

static const uint8_t sraf[] = {
        0x44,0x45,0x00,0x01,0x00,0x01,0x04,0x05,0x00,0x01,0x04,0x05,0x04,0x05,0x00,0x01,
        0x08,0x09,0x0c,0x0d,0x0c,0x0d,0x08,0x09,0x0c,0x0d,0x08,0x09,0x08,0x09,0x0c,0x0d,
        0x00,0x01,0x04,0x05,0x04,0x05,0x00,0x01,0x04,0x05,0x00,0x01,0x00,0x01,0x04,0x05,
        0x0c,0x0d,0x08,0x09,0x08,0x09,0x0c,0x0d,0x08,0x09,0x0c,0x0d,0x0c,0x0d,0x08,0x09,
        0x20,0x21,0x24,0x25,0x24,0x25,0x20,0x21,0x24,0x25,0x20,0x21,0x20,0x21,0x24,0x25,
        0x2c,0x2d,0x28,0x29,0x28,0x29,0x2c,0x2d,0x28,0x29,0x2c,0x2d,0x2c,0x2d,0x28,0x29,
        0x24,0x25,0x20,0x21,0x20,0x21,0x24,0x25,0x20,0x21,0x24,0x25,0x24,0x25,0x20,0x21,
        0x28,0x29,0x2c,0x2d,0x2c,0x2d,0x28,0x29,0x2c,0x2d,0x28,0x29,0x28,0x29,0x2c,0x2d,
        0x84,0x85,0x80,0x81,0x80,0x81,0x84,0x85,0x80,0x81,0x84,0x85,0x84,0x85,0x80,0x81,
        0x88,0x89,0x8c,0x8d,0x8c,0x8d,0x88,0x89,0x8c,0x8d,0x88,0x89,0x88,0x89,0x8c,0x8d,
        0x80,0x81,0x84,0x85,0x84,0x85,0x80,0x81,0x84,0x85,0x80,0x81,0x80,0x81,0x84,0x85,
        0x8c,0x8d,0x88,0x89,0x88,0x89,0x8c,0x8d,0x88,0x89,0x8c,0x8d,0x8c,0x8d,0x88,0x89,
        0xa0,0xa1,0xa4,0xa5,0xa4,0xa5,0xa0,0xa1,0xa4,0xa5,0xa0,0xa1,0xa0,0xa1,0xa4,0xa5,
        0xac,0xad,0xa8,0xa9,0xa8,0xa9,0xac,0xad,0xa8,0xa9,0xac,0xad,0xac,0xad,0xa8,0xa9,
        0xa4,0xa5,0xa0,0xa1,0xa0,0xa1,0xa4,0xa5,0xa0,0xa1,0xa4,0xa5,0xa4,0xa5,0xa0,0xa1,
        0xa8,0xa9,0xac,0xad,0xac,0xad,0xa8,0xa9,0xac,0xad,0xa8,0xa9,0xa8,0xa9,0xac,0xad
};

static const uint8_t incf[256] = {
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x10,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x30,
        0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x30,
        0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x10,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x10,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x30,
        0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x30,
        0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x94,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x90,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0xb0,
        0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xb0,
        0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0x90,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x90,
        0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0x88,0xb0,
        0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xb0,
        0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0xa8,0x50
};

static const uint8_t decf[256] = {
        0xba,0x42,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,
        0x1a,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,
        0x1a,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,
        0x3a,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,
        0x3a,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,
        0x1a,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,
        0x1a,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,
        0x3a,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,
        0x3e,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,
        0x9a,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,
        0x9a,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
        0xba,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
        0xba,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,
        0x9a,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,
        0x9a,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,
        0xba,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa
};

static uint8_t aluf[256] = {
    0x44,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x08,0x0c,0x0c,0x08,0x0c,0x08,0x08,0x0c,
    0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x0c,0x08,0x08,0x0c,0x08,0x0c,0x0c,0x08,
    0x20,0x24,0x24,0x20,0x24,0x20,0x20,0x24,0x2c,0x28,0x28,0x2c,0x28,0x2c,0x2c,0x28,
    0x24,0x20,0x20,0x24,0x20,0x24,0x24,0x20,0x28,0x2c,0x2c,0x28,0x2c,0x28,0x28,0x2c,
    0x00,0x04,0x04,0x00,0x04,0x00,0x00,0x04,0x0c,0x08,0x08,0x0c,0x08,0x0c,0x0c,0x08,
    0x04,0x00,0x00,0x04,0x00,0x04,0x04,0x00,0x08,0x0c,0x0c,0x08,0x0c,0x08,0x08,0x0c,
    0x24,0x20,0x20,0x24,0x20,0x24,0x24,0x20,0x28,0x2c,0x2c,0x28,0x2c,0x28,0x28,0x2c,
    0x20,0x24,0x24,0x20,0x24,0x20,0x20,0x24,0x2c,0x28,0x28,0x2c,0x28,0x2c,0x2c,0x28,
    0x80,0x84,0x84,0x80,0x84,0x80,0x80,0x84,0x8c,0x88,0x88,0x8c,0x88,0x8c,0x8c,0x88,
    0x84,0x80,0x80,0x84,0x80,0x84,0x84,0x80,0x88,0x8c,0x8c,0x88,0x8c,0x88,0x88,0x8c,
    0xa4,0xa0,0xa0,0xa4,0xa0,0xa4,0xa4,0xa0,0xa8,0xac,0xac,0xa8,0xac,0xa8,0xa8,0xac,
    0xa0,0xa4,0xa4,0xa0,0xa4,0xa0,0xa0,0xa4,0xac,0xa8,0xa8,0xac,0xa8,0xac,0xac,0xa8,
    0x84,0x80,0x80,0x84,0x80,0x84,0x84,0x80,0x88,0x8c,0x8c,0x88,0x8c,0x88,0x88,0x8c,
    0x80,0x84,0x84,0x80,0x84,0x80,0x80,0x84,0x8c,0x88,0x88,0x8c,0x88,0x8c,0x8c,0x88,
    0xa0,0xa4,0xa4,0xa0,0xa4,0xa0,0xa0,0xa4,0xac,0xa8,0xa8,0xac,0xa8,0xac,0xac,0xa8,
    0xa4,0xa0,0xa0,0xa4,0xa0,0xa4,0xa4,0xa0,0xa8,0xac,0xac,0xa8,0xac,0xa8,0xa8,0xac
};

static uint8_t rol[256] = {
    0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
    0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
    0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
    0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
    0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
    0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
    0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
    0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
    0x01,0x03,0x05,0x07,0x09,0x0b,0x0d,0x0f,0x11,0x13,0x15,0x17,0x19,0x1b,0x1d,0x1f,
    0x21,0x23,0x25,0x27,0x29,0x2b,0x2d,0x2f,0x31,0x33,0x35,0x37,0x39,0x3b,0x3d,0x3f,
    0x41,0x43,0x45,0x47,0x49,0x4b,0x4d,0x4f,0x51,0x53,0x55,0x57,0x59,0x5b,0x5d,0x5f,
    0x61,0x63,0x65,0x67,0x69,0x6b,0x6d,0x6f,0x71,0x73,0x75,0x77,0x79,0x7b,0x7d,0x7f,
    0x81,0x83,0x85,0x87,0x89,0x8b,0x8d,0x8f,0x91,0x93,0x95,0x97,0x99,0x9b,0x9d,0x9f,
    0xa1,0xa3,0xa5,0xa7,0xa9,0xab,0xad,0xaf,0xb1,0xb3,0xb5,0xb7,0xb9,0xbb,0xbd,0xbf,
    0xc1,0xc3,0xc5,0xc7,0xc9,0xcb,0xcd,0xcf,0xd1,0xd3,0xd5,0xd7,0xd9,0xdb,0xdd,0xdf,
    0xe1,0xe3,0xe5,0xe7,0xe9,0xeb,0xed,0xef,0xf1,0xf3,0xf5,0xf7,0xf9,0xfb,0xfd,0xff
};

static uint8_t ror[256] = {
    0x00,0x80,0x01,0x81,0x02,0x82,0x03,0x83,0x04,0x84,0x05,0x85,0x06,0x86,0x07,0x87,
    0x08,0x88,0x09,0x89,0x0a,0x8a,0x0b,0x8b,0x0c,0x8c,0x0d,0x8d,0x0e,0x8e,0x0f,0x8f,
    0x10,0x90,0x11,0x91,0x12,0x92,0x13,0x93,0x14,0x94,0x15,0x95,0x16,0x96,0x17,0x97,
    0x18,0x98,0x19,0x99,0x1a,0x9a,0x1b,0x9b,0x1c,0x9c,0x1d,0x9d,0x1e,0x9e,0x1f,0x9f,
    0x20,0xa0,0x21,0xa1,0x22,0xa2,0x23,0xa3,0x24,0xa4,0x25,0xa5,0x26,0xa6,0x27,0xa7,
    0x28,0xa8,0x29,0xa9,0x2a,0xaa,0x2b,0xab,0x2c,0xac,0x2d,0xad,0x2e,0xae,0x2f,0xaf,
    0x30,0xb0,0x31,0xb1,0x32,0xb2,0x33,0xb3,0x34,0xb4,0x35,0xb5,0x36,0xb6,0x37,0xb7,
    0x38,0xb8,0x39,0xb9,0x3a,0xba,0x3b,0xbb,0x3c,0xbc,0x3d,0xbd,0x3e,0xbe,0x3f,0xbf,
    0x40,0xc0,0x41,0xc1,0x42,0xc2,0x43,0xc3,0x44,0xc4,0x45,0xc5,0x46,0xc6,0x47,0xc7,
    0x48,0xc8,0x49,0xc9,0x4a,0xca,0x4b,0xcb,0x4c,0xcc,0x4d,0xcd,0x4e,0xce,0x4f,0xcf,
    0x50,0xd0,0x51,0xd1,0x52,0xd2,0x53,0xd3,0x54,0xd4,0x55,0xd5,0x56,0xd6,0x57,0xd7,
    0x58,0xd8,0x59,0xd9,0x5a,0xda,0x5b,0xdb,0x5c,0xdc,0x5d,0xdd,0x5e,0xde,0x5f,0xdf,
    0x60,0xe0,0x61,0xe1,0x62,0xe2,0x63,0xe3,0x64,0xe4,0x65,0xe5,0x66,0xe6,0x67,0xe7,
    0x68,0xe8,0x69,0xe9,0x6a,0xea,0x6b,0xeb,0x6c,0xec,0x6d,0xed,0x6e,0xee,0x6f,0xef,
    0x70,0xf0,0x71,0xf1,0x72,0xf2,0x73,0xf3,0x74,0xf4,0x75,0xf5,0x76,0xf6,0x77,0xf7,
    0x78,0xf8,0x79,0xf9,0x7a,0xfa,0x7b,0xfb,0x7c,0xfc,0x7d,0xfd,0x7e,0xfe,0x7f,0xff
};

static uint8_t rlcaf[256] = {
    0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,
    0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,
    0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,
    0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,
    0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,
    0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,
    0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,
    0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,0x20,0x20,0x20,0x20,0x28,0x28,0x28,0x28,
    0x01,0x01,0x01,0x01,0x09,0x09,0x09,0x09,0x01,0x01,0x01,0x01,0x09,0x09,0x09,0x09,
    0x21,0x21,0x21,0x21,0x29,0x29,0x29,0x29,0x21,0x21,0x21,0x21,0x29,0x29,0x29,0x29,
    0x01,0x01,0x01,0x01,0x09,0x09,0x09,0x09,0x01,0x01,0x01,0x01,0x09,0x09,0x09,0x09,
    0x21,0x21,0x21,0x21,0x29,0x29,0x29,0x29,0x21,0x21,0x21,0x21,0x29,0x29,0x29,0x29,
    0x01,0x01,0x01,0x01,0x09,0x09,0x09,0x09,0x01,0x01,0x01,0x01,0x09,0x09,0x09,0x09,
    0x21,0x21,0x21,0x21,0x29,0x29,0x29,0x29,0x21,0x21,0x21,0x21,0x29,0x29,0x29,0x29,
    0x01,0x01,0x01,0x01,0x09,0x09,0x09,0x09,0x01,0x01,0x01,0x01,0x09,0x09,0x09,0x09,
    0x21,0x21,0x21,0x21,0x29,0x29,0x29,0x29,0x21,0x21,0x21,0x21,0x29,0x29,0x29,0x29
};
